{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#welcome-to-lambda-forge","title":"Welcome to Lambda Forge","text":"<p>Lambda Forge is an open-source Python framework, built on top of AWS Cloud Development Kit, that revolutionizes the AWS Lambda deployment enabling a modular and scalable architecture with an automated CI/CD pipeline for a multi-stage environment.</p> <p>Additionally, it includes a Command Line Interface named <code>Forge</code>, designed to optimize your development workflow. Forge not only speeds up and standardizes the development process but also automatically generates comprehensive documentation for your endpoints using Swagger and Redoc.</p> <p></p>"},{"location":"articles/page1/","title":"How to Create an Amazon S3 Bucket","text":"<p>Amazon Simple Storage Service (Amazon S3) offers industry-leading scalability, data availability, security, and performance. This tutorial will guide you through the process of creating an S3 bucket, which can be used for a wide range of applications, including website hosting, data storage, and backups.</p>"},{"location":"articles/page1/#prerequisites","title":"Prerequisites","text":"<ul> <li>You should already be logged into your AWS account.</li> <li>Familiarity with the basic concepts of AWS S3.</li> </ul>"},{"location":"articles/page1/#step-1-open-the-amazon-s3-console","title":"Step 1: Open the Amazon S3 Console","text":"<ol> <li>Once logged in to the AWS Management Console, locate the Services menu at the top of the console.</li> <li>Use the search bar to find S3 or navigate through the categories to locate S3 under the Storage section.</li> <li>Click on S3 to open the S3 console.</li> </ol>"},{"location":"articles/page1/#step-2-create-a-new-bucket","title":"Step 2: Create a New Bucket","text":"<ol> <li>In the S3 console, click the Create bucket button. This action opens a wizard to guide you through the bucket creation process.</li> <li> <p>Enter the following details:</p> </li> <li> <p>Bucket name: Choose a unique name for your bucket. This name must be globally unique across all existing bucket names in Amazon S3 and cannot be changed after the bucket is created.</p> </li> <li> <p>AWS Region: Choose the same region specified in your <code>cdk.json</code> file.</p> </li> <li> <p>(Optional) Configure additional options such as Versioning, Server Access Logging, Tags, and Default Encryption according to your requirements. If you're unsure or new to S3, you may proceed with the default settings.</p> </li> <li>Review your settings, then click Create bucket.</li> </ol>"},{"location":"articles/page1/#step-3-access-your-bucket","title":"Step 3: Access Your Bucket","text":"<ul> <li>After creation, your new bucket will be listed in the S3 console. Click on your bucket's name to start uploading files, creating folders, or setting up permissions.</li> </ul>"},{"location":"articles/page1/#best-practices","title":"Best Practices","text":"<ul> <li>Naming Convention: Adhere to a consistent naming convention for easier management, especially if you plan to create multiple buckets.</li> <li>Region Selection: Align the bucket's region with your other AWS resources to reduce latency and costs.</li> <li>Security: By default, all S3 buckets are private. Only make a bucket public if it is intended to serve static web content. Always follow the principle of least privilege when configuring bucket permissions.</li> </ul>"},{"location":"articles/page1/#making-your-bucket-public","title":"Making Your Bucket Public","text":"<p>To make your S3 bucket public and accessible to the internet, follow these steps:</p> <ol> <li>Navigate to the S3 console.</li> <li>Select the bucket you want to make public.</li> <li>Go to the Permissions tab.</li> <li>Click on Bucket Policy.</li> <li>Add a policy to allow public access to your bucket. Here's an example policy:</li> </ol> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"PublicReadGetObject\",\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::YOUR_BUCKET_NAME/*\"\n    }\n  ]\n}\n</code></pre>"},{"location":"articles/page1/#conclusion","title":"Conclusion","text":"<p>You have successfully created an Amazon S3 bucket and learned how to make it public to serve static web content or other purposes. Remember to always consider security implications and follow best practices when configuring bucket permissions. Explore further S3 features such as lifecycle policies, object versioning, and cross-region replication to optimize your data storage strategy.</p>"},{"location":"articles/page2/","title":"How to Configure a Custom Domain Name for API Gateway","text":"<p>Configuring a custom domain name for your API Gateway allows you to present a professional and brand-consistent URL to your users. This step-by-step guide will walk you through the process of setting up a custom domain name for your API Gateway in AWS.</p>"},{"location":"articles/page2/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following:</p> <ol> <li>An AWS account.</li> <li>A deployed API in API Gateway.</li> <li>A registered domain name. You can use Amazon Route 53 or any other domain registrar.</li> <li>An SSL certificate for your custom domain name in AWS Certificate Manager (ACM). This is required for HTTPS.</li> </ol>"},{"location":"articles/page2/#step-1-request-a-certificate-in-aws-certificate-manager","title":"Step 1: Request a Certificate in AWS Certificate Manager","text":"<ol> <li>Go to the AWS Certificate Manager: In the AWS Management Console, navigate to ACM.</li> <li>Request a Certificate: Click on \u201cRequest a certificate\u201d and choose \u201cRequest a public certificate\u201d.</li> <li>Add your domain names: Enter your custom domain name. You can add multiple names if needed.</li> <li>Choose validation method: You can validate your domain ownership via DNS or email. DNS validation is recommended for its simplicity and speed.</li> <li>Review and request: Review your details and click \u201cConfirm and request\u201d.</li> </ol>"},{"location":"articles/page2/#step-2-validate-your-domain","title":"Step 2: Validate Your Domain","text":"<ul> <li>For DNS Validation: Add the CNAME record provided by ACM to your DNS configuration. This process varies depending on your DNS provider.</li> <li>For Email Validation: Check the email associated with your domain registration and follow the instructions in the email from AWS.</li> </ul>"},{"location":"articles/page2/#step-3-create-a-custom-domain-name-in-api-gateway","title":"Step 3: Create a Custom Domain Name in API Gateway","text":"<ol> <li>Navigate to API Gateway: In the AWS Management Console, go to API Gateway.</li> <li>Create Custom Domain Name: Click on \u201cCustom Domain Names\u201d in the sidebar, then \u201cCreate\u201d.</li> <li>Configure your domain name: Enter your domain name and select the ACM certificate you created earlier.</li> <li>Set up Endpoint Configuration: Choose the endpoint type. You can choose from an \u201cEdge-optimized\u201d (default and recommended for global clients) or \u201cRegional\u201d (if your users are primarily in one region) endpoint.</li> <li>Save the Custom Domain Name: Click on \u201cSave\u201d to create your custom domain name.</li> </ol>"},{"location":"articles/page2/#step-4-configure-the-base-path-mapping","title":"Step 4: Configure the Base Path Mapping","text":"<ol> <li>Select your custom domain name: From the list of custom domain names, click on the one you just created.</li> <li>Create a new Base Path Mapping: Click on the \u201cBase Path Mappings\u201d section and then \u201cAdd new base path\u201d.</li> <li>Set up the Base Path: Choose the destination API and stage for your custom domain. The base path allows you to direct traffic to different APIs or stages from the same domain.</li> <li>Save your Base Path Mapping: Click on \u201cSave\u201d.</li> </ol>"},{"location":"articles/page2/#step-5-update-your-dns-records","title":"Step 5: Update Your DNS Records","text":"<ol> <li>Get the API Gateway domain name: After saving your custom domain name in API Gateway, you'll get a target domain name. This is different from your custom domain.</li> <li>Create a CNAME record: In your domain\u2019s DNS settings, create a CNAME record pointing your custom domain to the target domain name provided by API Gateway.</li> </ol>"},{"location":"articles/page2/#step-6-test-your-custom-domain","title":"Step 6: Test Your Custom Domain","text":"<ul> <li>After your DNS changes propagate, test your custom domain by sending requests to your API through the new domain name.</li> </ul>"},{"location":"articles/page2/#conclusion","title":"Conclusion","text":"<p>You have successfully configured a custom domain name for your API Gateway. This not only enhances your API's branding but also provides a more secure and professional way to present your services to the world.</p> <p>If you encounter any issues, AWS documentation and support forums are great resources for troubleshooting and getting additional help.</p>"},{"location":"articles/page3/","title":"Mocking AWS Resources for Unit Testing","text":"<p>Coming soon...</p>"},{"location":"articles/page4/","title":"Finding the API Gateway Base URL","text":"<p>This guide will walk you through the steps to locate the base URL for the API Gateway, essential for interacting with your deployed functions. Our focus will be on the function named <code>Staging-Lambda-Forge-Demo-HelloWorld</code>.</p> <p></p> <p>First, navigate to the function in question. Then, access <code>Configurations -&gt; Triggers</code> to uncover the URL generated upon deployment.</p> <p></p> <p>For the purposes of our tutorial, the relevant URL is as follows:</p> <ul> <li>https://8kwcovaj0f.execute-api.us-east-2.amazonaws.com/staging/hello_world</li> </ul> <p>The BASE URL, vital for API interactions, is identified as the URL segment before the <code>/hello_world</code> endpoint. For our example, it's:</p> <p><code>https://8kwcovaj0f.execute-api.us-east-2.amazonaws.com/staging</code></p> <p>With the base URL now in your possession, you're well-equipped to begin integrating your services, paving the way for seamless communication and functionality between your applications and the AWS infrastructure.</p>"},{"location":"articles/page5/","title":"Deploying an External Library to AWS Lambda as a Layer","text":"<p>This guide outlines the steps to deploy an external library, such as the qrcode library, to AWS Lambda as a Layer. AWS Lambda Layers serve as a repository for managing common code or data shared across multiple functions. By deploying the <code>qrcode</code> library as a Layer, the library can be utilized in various Lambda functions without needing to be included in each function's deployment package.</p> <p>Although the <code>qrcode</code> library is used as an example, this method applies universally to any library you wish to deploy in this manner.</p>"},{"location":"articles/page5/#setting-up-the-environment","title":"Setting Up The Environment","text":"<pre><code>mkdir packages\ncd packages\n</code></pre> <p>Initialize a virtual environment within this directory and activate it:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Create a directory named <code>python</code> within the current directory and navigate into it:</p> <pre><code>mkdir python\ncd python\n</code></pre> <p>It is crucial to name this directory as python as it aligns with Lambda Layers' requirements.</p> <p>Install the qrcode library directly into this directory:</p> <pre><code>pip install qrcode -t .\n</code></pre> <p>This command uses pip to install the library into the current <code>python</code> directory.</p> <p>After installation, you can attempt to list the directory contents. You should see the installed packages.</p>"},{"location":"articles/page5/#preparing-the-layer-package","title":"Preparing the Layer Package","text":"<p>Remove unnecessary files, specifically those with the .dist-info extension, to conserve space. These files are not needed for the Lambda Layer:</p> <pre><code>rm -rf *dist-info\n</code></pre> <p>Return to the parent directory:</p> <pre><code>cd ..\n</code></pre> <p>Zip the python directory, naming the zip file <code>qr-code-lambda-package.zip</code>:</p> <pre><code>zip -r qr-code-lambda-package.zip python\n</code></pre> <p>You should now have the zip file in your current directory.</p> <p>Create a s3 bucket and upload your zip file to it:</p> <pre><code>aws s3 cp qr-code-lambda-package.zip s3://your-s3-bucket-name/\n</code></pre> <p>Verify the upload by checking the S3 bucket and ensuring the zip file is present. Note the object URL for later use.</p>"},{"location":"articles/page5/#creating-and-using-the-lambda-layer","title":"Creating and Using the Lambda Layer","text":"<p>Navigate to the AWS Lambda console and select the Layers option.</p> <p>Click on <code>Create layer</code> and input the necessary configuration details. Choose the <code>Upload a file from Amazon S3</code> option and paste the URL of the bucket containing the zip file you created earlier.</p> <p>Finalize by clicking \"Add\".</p> <p>That's it! You've successfully deployed the <code>qrcode</code> library to AWS Lambda as a Layer.</p>"},{"location":"examples/page1/","title":"Introduction","text":"<p>In this guide, we'll take you on a journey through the development process with Lambda Forge, illustrating the progression of projects through a hands-on, step-by-step approach within a unified codebase. Our methodology employs an incremental build strategy, where each new feature enhances the foundation laid by preceding projects, ensuring a cohesive and scalable architecture without duplicating efforts.</p> <p>To keep our focus sharp on AWS resources and Lambda Forge architecture, we'll skip over the detailed discussion of unit and integration tests here. However, for those eager to dive deeper into testing methodologies, there is an insightful article called Mocking AWS Resources for Unit Testing aimed at enriching your understanding about the subject.</p> <p>Our objective is to provide a streamlined and informative learning path, striking a balance between technical detail and approachability to keep you engaged without feeling overwhelmed.</p> <p>To enhance usability and the overall user experience, we've implemented a custom domain, <code>https://api.lambda-forge.com</code>, making our URLs succinct and memorable across various deployment stages:</p> <ul> <li>Dev - <code>https://api.lambda-forge.com/dev</code></li> <li>Staging - <code>https://api.lambda-forge.com/staging</code></li> <li>Prod - <code>https://api.lambda-forge.com</code></li> </ul> <p>For those interested in customizing domain names within API Gateway, the How to Configure a Custom Domain Name for API Gateway guide offers a detailed tutorial on personalizing your project's URL.</p> <p>Let's kick off by setting up our project:</p> <pre><code>forge project lambda-forge-examples --repo-owner \"$GITHUB-OWNER\" --repo-name \"$GITHUB-REPO\" --bucket \"$S3-BUCKET\"\n</code></pre> <p>Docs: https://api.lambda-forge.com/docs.</p> <p>Source code: https://github.com/GuiPimenta-Dev/lambda-forge-examples</p>"},{"location":"examples/page2/","title":"Creating a URL Shortener Service Using DynamoDB","text":"<p>In this section, we will explore the development of a URL shortener. This utility enables users to input a lengthy URL, which the system then compresses into a more concise version.</p>"},{"location":"examples/page2/#configuring-dynamodb-tables-for-each-deployment-stage","title":"Configuring DynamoDB Tables for Each Deployment Stage","text":"<p>To ensure our application can operate smoothly across different environments, we'll create three separate DynamoDB tables on AWS DynamoDB console, each tailored for a distinct deployment stage: <code>Dev-URLs</code>, <code>Staging-URLs</code> and <code>Prod-URLs</code>.</p> <p>Note</p> <p>Throughout this tutorial, we'll utilize PK as the Partition Key for all of our DynamoDB tables.</p> <p>Having acquired the ARNs for each stage-specific table, our next step involves integrating these ARNs into the <code>cdk.json</code> file. This crucial configuration enables our Cloud Development Kit (CDK) setup to correctly reference the DynamoDB tables according to the deployment stage.</p> <p>Here's how to update your <code>cdk.json</code> file to include the DynamoDB table ARNs for development, staging, and production environments:</p> cdk.json<pre><code>    \"dev\": {\n      \"arns\": {\n        \"urls_table\": \"$DEV-URLS-TABLE-ARN\"\n      }\n    },\n    \"staging\": {\n      \"arns\": {\n        \"urls_table\": \"$STAGING-URLS-TABLE-ARN\"\n      }\n    },\n    \"prod\": {\n      \"arns\": {\n        \"urls_table\": \"$PROD-URLS-TABLE-ARN\"\n      }\n    }\n</code></pre>"},{"location":"examples/page2/#incorporating-dynamodb-into-the-service-class","title":"Incorporating DynamoDB Into the Service Class","text":"<p>The subsequent phase in enhancing our application involves integrating the DynamoDB service within our service layer, enabling direct communication with DynamoDB tables. To accomplish this, utilize the following command:</p> <p><code>forge service dynamo_db</code></p> <p>This command creates a new service file named <code>dynamo_db.py</code> within the <code>infra/services</code> directory.</p> <pre><code>infra\n\u251c\u2500\u2500 services\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 api_gateway.py\n    \u251c\u2500\u2500 aws_lambda.py\n    \u251c\u2500\u2500 dynamo_db.py\n    \u2514\u2500\u2500 layers.py\n</code></pre> <p>Below is the updated structure of our Service class, now including the DynamoDB service, demonstrating the integration's completion:</p> infra/services/__init__.py<pre><code>from infra.services.dynamo_db import DynamoDB\nfrom infra.services.api_gateway import APIGateway\nfrom infra.services.aws_lambda import AWSLambda\nfrom infra.services.layers import Layers\n\n\nclass Services:\n    def __init__(self, scope, context) -&gt; None:\n        self.api_gateway = APIGateway(scope, context)\n        self.aws_lambda = AWSLambda(scope, context)\n        self.layers = Layers(scope)\n        self.dynamo_db = DynamoDB(scope, context)\n</code></pre> <p>Here is the newly established DynamoDB class:</p> infra/services/dynamo_db.py<pre><code>from aws_cdk import aws_dynamodb as dynamo_db\nfrom aws_cdk import aws_iam as iam\n\n\nclass DynamoDB:\n    def __init__(self, scope, context: dict) -&gt; None:\n\n        # self.dynamo = dynamo_db.Table.from_table_arn(\n        #     scope,\n        #     \"Dynamo\",\n        #     context.resources[\"arns\"][\"dynamo_arn\"],\n        # )\n        ...\n\n    @staticmethod\n    def add_query_permission(table, function):\n        function.add_to_role_policy(\n            iam.PolicyStatement(\n                actions=[\"dynamodb:Query\"],\n                resources=[f\"{table.table_arn}/index/*\"],\n            )\n        )\n</code></pre> <p>Forge has already laid the groundwork by providing a commented code that outlines the structure for creating a DynamoDB table and retrieving its ARN from the <code>cdk.json</code> file. Additionally, it's worth noting that the DynamoDB class includes a specialized helper method aimed at streamlining the task of assigning query permissions.</p> <p>Let's refine the class variables to directly reference our URLs table.</p> infra/services/dynamo_db.py<pre><code>class DynamoDB:\n    def __init__(self, scope, context: dict) -&gt; None:\n\n        self.urls_table = dynamo_db.Table.from_table_arn(\n            scope,\n            \"URLsTable\",\n            context.resources[\"arns\"][\"urls_table\"],\n        )\n</code></pre> <p>The <code>context.resources</code> object on line 11 contains only the resources that are pertinent to the current stage. By tapping into this, we can dynamically tweak our AWS resources according to the specific stage we're operating in.</p>"},{"location":"examples/page2/#implementing-the-shortener-function","title":"Implementing the Shortener Function","text":"<p>To initiate, let's develop the shortener function, which serves as the primary interface for user interaction. This function is tasked with accepting a lengthy URL from the user and providing them with its shortened counterpart in response:</p> <pre><code>forge function shortener --method \"POST\" --description \"Creates a new short URL entry in DynamoDB mapped to the original one\" --belongs-to urls --public --no-tests\n</code></pre> <p>Executing the command will result in the establishment of the following directory structure:</p> <pre><code>functions\n\u2514\u2500\u2500 urls\n    \u251c\u2500\u2500 shortener\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Now, let's implement it's functionality:</p> functions/urls/shortener/main.py<pre><code>from dataclasses import dataclass\nimport hashlib\nimport json\nimport os\nimport boto3\n\n@dataclass\nclass Input:\n    url: str\n\n\n@dataclass\nclass Output:\n    short_url: str\n\n\ndef lambda_handler(event, context):\n    # Retrieve DynamoDB table name and the Base URL from environment variables.\n    URLS_TABLE_NAME = os.environ.get(\"URLS_TABLE_NAME\")\n    BASE_URL = os.environ.get(\"BASE_URL\")\n\n    # Initialize DynamoDB resource.\n    dynamodb = boto3.resource(\"dynamodb\")\n\n    # Reference the specified DynamoDB table.\n    urls_table = dynamodb.Table(URLS_TABLE_NAME)\n\n    # Parse the URL from the incoming event's body.\n    body = json.loads(event[\"body\"])\n    original_url = body[\"url\"]\n\n    # Generate a URL hash.\n    hash_object = hashlib.sha256(original_url.encode())\n    url_id = hash_object.hexdigest()[:6]\n\n    # Store the mapping in DynamoDB.\n    urls_table.put_item(Item={\"PK\": url_id, \"original_url\": original_url})\n\n    # Construct the shortened URL.\n    short_url = f\"{BASE_URL}/{url_id}\"\n\n    # Return success response.\n    return {\"statusCode\": 200, \"body\": json.dumps({\"short_url\": short_url})}\n</code></pre> <p>This code is the core of our URL shortening service. It transforms long URLs into shorter, hash-based versions, and storing this information in DynamoDB for future retrieval.</p> <p>Since we are operating in a multi-stage environment, this function is dynamically retrieving the BASE URL from environment variables, as shown on line 20. This approach ensures stage-specific responses, enabling seamless URL customization.</p> <p>To make this possible, we must incorporate the base URL into the <code>cdk.json</code> file and implement minor modifications. These adjustments will enable the base URL to be accessible within the <code>config.py</code> class, thereby allowing the function to access the appropriate base URL depending on the environment it's operating in.</p> cdk.json<pre><code>    \"dev\": {\n      \"base_url\": \"https://api.lambda-forge.com/dev\",\n      \"arns\": {\n        \"urls_table\": \"$DEV-URLS-TABLE-ARN\"\n      }\n    },\n    \"staging\": {\n      \"base_url\": \"https://api.lambda-forge.com/staging\",\n      \"arns\": {\n        \"urls_table\": \"$STAGING-URLS-TABLE-ARN\"\n      }\n    },\n    \"prod\": {\n      \"base_url\": \"https://api.lambda-forge.com\",\n      \"arns\": {\n        \"urls_table\": \"$PROD-URLS-TABLE-ARN\"\n      }\n    }\n</code></pre> <p>Note</p> Follow the article Finding the Api Gateway Base URL to locate your own base URL in each environment.  <p>Initially, the <code>LambdaStack</code> class sends only the <code>self.services</code> as argument to the <code>ShortenerConfig</code> class. We must update it to also send the <code>context</code> parameter. This change allows the config class to access base URLs and dynamically set the correct environment variables during the function definition, enhancing its adaptability.</p> infra/stacks/lambda_stack.py<pre><code>class LambdaStack(Stack):\n    def __init__(self, scope: Construct, context, **kwargs) -&gt; None:\n\n        super().__init__(scope, f\"{context.name}-Lambda-Stack\", **kwargs)\n\n        self.services = Services(self, context)\n\n        # Urls\n        ShortenerConfig(self.services, context)\n</code></pre> <p>To conclude, we will now proceed with configuring our Lambda function.</p> functions/urls/config.py<pre><code>from infra.services import Services\n\nclass ShortenerConfig:\n    def __init__(self, services: Services, context) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"Shortener\",\n            path=\"./functions/urls\",\n            description=\"Creates a new short URL entry in DynamoDB mapping to the original url\",\n            directory=\"shortener\",\n            environment={\n                \"URLS_TABLE_NAME\": services.dynamo_db.urls_table.table_name,\n                \"BASE_URL\": context.resources[\"base_url\"],\n            },\n        )\n\n        services.api_gateway.create_endpoint(\"POST\", \"/urls\", function, public=True)\n\n        services.dynamo_db.urls_table.grant_write_data(function)\n</code></pre> <p>In this configuration, we specify resources according to the deployment stages of the Lambda function, setting up the DynamoDB table and API Gateway base URL accordingly. It also includes permission settings, enabling the Lambda function to write to our DynamoDB table.</p>"},{"location":"examples/page2/#implementing-the-redirect-function","title":"Implementing the Redirect Function","text":"<p>Having established the necessary components for URL shortening, we now proceed to create a new function tasked with redirecting users from the shortened URL to its original counterpart.</p> <p>Begin by creating a new function:</p> <pre><code>forge function redirect --method \"GET\" --description \"Redirects from the short url to the original url\" --belongs-to urls --public --no-tests\n</code></pre> <p>The revised directory structure will appear as follows:</p> <pre><code>functions\n\u2514\u2500\u2500 urls\n    \u251c\u2500\u2500 redirect\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u2514\u2500\u2500 main.py\n    \u251c\u2500\u2500 shortener\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u2514\u2500\u2500 main.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Now, let's implement the redirect functionality.</p> functions/urls/redirect/main.py<pre><code>from dataclasses import dataclass\nimport json\nimport boto3\nimport os\n\n\n@dataclass\nclass Path:\n    url_id: str\n\n\n@dataclass\nclass Input:\n    pass\n\n\n@dataclass\nclass Output:\n    pass\n\n\ndef lambda_handler(event, context):\n\n    # Retrieve DynamoDB table name from environment variables.\n    URLS_TABLE_NAME = os.environ.get(\"URLS_TABLE_NAME\")\n\n    # Initialize DynamoDB resource and table reference.\n    dynamodb = boto3.resource(\"dynamodb\")\n    urls_table = dynamodb.Table(URLS_TABLE_NAME)\n\n    # Extract shortened URL identifier from path parameters.\n    short_url = event[\"pathParameters\"][\"url_id\"]\n\n    # Retrieve the original URL using the shortened identifier.\n    response = urls_table.get_item(Key={\"PK\": short_url})\n    original_url = response.get(\"Item\", {}).get(\"original_url\")\n\n    # Return 404 if no URL is found for the identifier.\n    if original_url is None:\n        return {\"statusCode\": 404, \"body\": json.dumps({\"message\": \"URL not found\"})}\n\n    # Ensure URL starts with \"http://\" or \"https://\".\n    if not original_url.startswith(\"http\"):\n        original_url = f\"http://{original_url}\"\n\n    # Redirect to the original URL with a 301 Moved Permanently response.\n    return {\"statusCode\": 301, \"headers\": {\"Location\": original_url}}\n</code></pre> <p>In this Lambda function, we're essentially setting up a redirect service. When a request comes in with a short URL identifier, the function looks up this identifier in the DynamoDB table to find the corresponding original URL. If found, it redirects the user to the original URL.</p> <p>Next, let's move on to its configuration.</p> functions/urls/redirect/config.py<pre><code>from infra.services import Services\n\n\nclass RedirectConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"Redirect\",\n            path=\"./functions/urls\",\n            description=\"Redirects from the short url to the original url\",\n            directory=\"redirect\",\n            environment={\n                \"URLS_TABLE_NAME\": services.dynamo_db.urls_table.table_name,\n            }\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/{url_id}\", function, public=True)\n\n        services.dynamo_db.urls_table.grant_read_data(function)\n</code></pre>"},{"location":"examples/page2/#deploying-the-functions","title":"Deploying the Functions","text":"<p>Next, we'll commit our code and push it to GitHub, following these steps:</p> <pre><code># Send your changes to stage\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"URL Shortener with DynamoDB integration\"\n\n# Push changes to the 'dev' branch\ngit push origin dev\n\n# Merge 'dev' into 'staging' and push\ngit checkout staging\ngit merge dev\ngit push origin staging\n\n# Finally, merge 'staging' into 'main' and push\ngit checkout main\ngit merge staging\ngit push origin main\n</code></pre> <p>This sequence ensures our code passes through development, staging, and finally, production environments, activating our three distinct deployment pipelines.</p> <p></p> <p>After the pipelines complete, the URL Shortener feature is available across development, staging, and production stages.</p>"},{"location":"examples/page2/#testing-the-deployment","title":"Testing The Deployment","text":"<p>Let's test our URL Shortener by shortening a lengthy URL. For demonstration purposes, we'll use the production environment, but the process remains identical for development and staging, using their respective endpoints.</p> <p>Execute a POST request to shorten the URL:</p> <pre><code>curl --request POST \\\n  --url https://api.lambda-forge.com/urls \\\n  --header 'Content-Type: application/json' \\\n  --header 'accept: application/json' \\\n  --data '{\n    \"url\": \"https://public-lambda-forge-logo.s3.us-east-2.amazonaws.com/wNSN2U7n9NiAKEItWlsrcdJ0RWFyZOmbNvsc6Kht84WsWVxuBz5O.png\"\n}'\n</code></pre> <p>This request generates a short URL:</p> <pre><code>{\n  \"short_url\": \"https://api.lambda-forge.com/bc23d3\"\n}\n</code></pre> <p>Navigating to this URL in your browser will redirect you to the original content, showcasing our URL Shortener in action.</p> <p></p> <p>\ud83c\udf89 Success! Our URL shortener function is now deployed and operational across all environments.</p>"},{"location":"examples/page3/","title":"Developing a Serverless CRUD App Using DynamoDB","text":"<p>In this section, we will develop a straightforward CRUD application designed to capture and manage user-defined names and ages, each uniquely identified by a UUID. This approach not only simplifies the demonstration of the architecture's capabilities but also emphasizes the practical application of these technologies in a user-centric scenario.</p> <p>Note</p> The unit tests for this project are used as example by the Mocking AWS Resources for Unit Testing article. If you're interested in learning how to effectively mock DynamoDB for testing in your own projects, it's a highly recommended read."},{"location":"examples/page3/#configuring-dynamodb-tables-for-each-deployment-stage","title":"Configuring DynamoDB Tables for Each Deployment Stage","text":"<p>To ensure our application can operate smoothly across different environments, we'll create three separate DynamoDB tables on AWS DynamoDB console, each tailored for a distinct deployment stage: <code>Dev-Users</code>, <code>Staging-Users</code> and <code>Prod-Users</code>.</p> <p>Having acquired the ARNs for each stage-specific table, our next step involves integrating these ARNs into the <code>cdk.json</code> file.</p> cdk.json<pre><code>    \"dev\": {\n      \"base_url\": \"https://api.lambda-forge.com/dev\",\n      \"arns\": {\n        \"urls_table\": \"$DEV-URLS-TABLE-ARN\",\n        \"users_table\": \"$DEV-USERS-TABLE-ARN\"\n      }\n    },\n    \"staging\": {\n      \"base_url\": \"https://api.lambda-forge.com/staging\",\n      \"arns\": {\n        \"urls_table\": \"$STAGING-URLS-TABLE-ARN\",\n        \"users_table\": \"$STAGING-USERS-TABLE-ARN\"\n      }\n    },\n    \"prod\": {\n      \"base_url\": \"https://api.lambda-forge.com\",\n      \"arns\": {\n        \"urls_table\": \"$PROD-URLS-TABLE-ARN\",\n        \"users_table\": \"$PROD-USERS-TABLE-ARN\"\n      }\n    }\n</code></pre>"},{"location":"examples/page3/#implementing-the-create-functionality","title":"Implementing the Create Functionality","text":"<p>Next, we'll focus on constructing the \"Create\" functionality of our CRUD application. This feature is dedicated to inputting names and their corresponding ages into our DynamoDB tables. To initiate the creation of a Lambda function tailored for this operation, run the following command in the Forge CLI:</p> <pre><code>forge function create_user --method \"POST\" --description \"Create a user with name and age on Dynamo DB\" --belongs-to users --public\n</code></pre> <p>This command signals to Forge the need to generate a new Lambda function named create_user, which will handle POST requests. By applying the <code>--belongs-to</code> flag, we guide Forge to organize this function within the <code>users</code> directory, emphasizing its role as part of a suite of user-related functionalities.</p> <pre><code>functions\n\u2514\u2500\u2500 users\n    \u251c\u2500\u2500 create_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <ul> <li><code>users/</code> This directory acts as the container for all Lambda functions related to users operations, organizing them under a common theme.</li> <li><code>create_user/</code> This subdirectory is dedicated to the function for creating users, equipped with all necessary files for its execution, configuration, and testing.</li> <li><code>utils/</code> A utility directory for shared functions or helpers that support the operations within the users functions, enhancing code reuse and maintainability.</li> </ul>"},{"location":"examples/page3/#core-logic","title":"Core Logic","text":"<p>The Create User endpoint serves as the gateway for adding new users to our system. It processes incoming data from the request body, assigns a unique UUID to each user, and then stores this information in DynamoDB. Now, let's delve into the details of the function implementation.</p> functions/users/create_user/main.py<pre><code>import json\nimport uuid\nfrom dataclasses import dataclass\nimport os\nimport boto3\n\n\n@dataclass\nclass Input:\n    name: str\n    age: int\n\n\n@dataclass\nclass Output:\n    id: str\n\n\ndef lambda_handler(event, context):\n    # Retrieve the DynamoDB table name from environment variables.\n    USERS_TABLE = os.environ.get(\"USERS_TABLE\")\n\n    # Initialize a DynamoDB resource.\n    dynamodb = boto3.resource(\"dynamodb\")\n\n    # Reference the DynamoDB table.\n    users_table = dynamodb.Table(USERS_TABLE)\n\n    # Parse the request body to get user data.\n    body = json.loads(event[\"body\"])\n\n    # Generate a unique ID for the new user.\n    user_id = str(uuid.uuid4())\n\n    # Insert the new user into the DynamoDB table.\n    users_table.put_item(Item={\"PK\": user_id, \"name\": body[\"name\"], \"age\": body[\"age\"]})\n\n    # Return a successful response with the newly created user ID.\n    return {\"statusCode\": 200, \"body\": json.dumps({\"user_id\": user_id})}\n</code></pre>"},{"location":"examples/page3/#configuration-class","title":"Configuration Class","text":"<p>Let's develop a configuration class to streamline the lambda function's access to necessary resources. This class will centralize the management of environment variables and resource configurations, thereby enhancing code maintainability and readability. It ensures that all external resources such as DynamoDB tables are easily configurable and securely accessed within the lambda function.</p> functions/users/create_user/config.py<pre><code>from infra.services import Services\n\n\nclass CreateUserConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"CreateUser\",\n            path=\"./functions/users\",\n            description=\"Create a user with name and age on Dynamo DB\",\n            directory=\"create_user\",\n            environment={\n                \"USERS_TABLE_NAME\": services.dynamo_db.users_table.table_name,\n            },\n        )\n\n        services.api_gateway.create_endpoint(\"POST\", \"/users\", function, public=True)\n\n        services.dynamo_db.users_table.grant_write_data(function)\n</code></pre>"},{"location":"examples/page3/#implementing-the-read-functionality","title":"Implementing the Read Functionality","text":"<p>We're now set to construct the read feature, enabling the retrieval of user details using their ID.</p> <p>To facilitate this, we'll utilize the following command:</p> <pre><code>forge function get_user --method \"GET\" --description \"Retrieve user information by ID\" --belongs-to users --endpoint \"/users/{user_id}\" --public\n</code></pre> <p>The <code>--endpoint \"/users/{user_id}\"</code> parameter sets up a specific URL path for accessing this function. This path includes a dynamic segment {user_id} that gets replaced by the actual ID of the user we're trying to retrieve information about when the function is called.</p> <p>By running this command, we add a new layer to our application that specifically handles fetching user details in an organized, accessible manner.</p> <pre><code>functions\n\u2514\u2500\u2500 users\n    \u251c\u2500\u2500 create_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u251c\u2500\u2500 get_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"examples/page3/#core-logic_1","title":"Core Logic","text":"<p>This segment of our application demonstrates the retrieval of user information from a DynamoDB table through an AWS Lambda function. It highlights how to parse API gateway events, interact with DynamoDB, and structure responses for efficient data delivery.</p> functions/users/get_user/main.py<pre><code>import json\nimport os\nimport boto3\nfrom dataclasses import dataclass\n\n@dataclass\nclass Path:\n    user_id: str\n\n@dataclass\nclass Input:\n    pass\n\n@dataclass\nclass Output:\n    name: str\n    age: int\n\ndef lambda_handler(event, context):\n    # Retrieve the name of the DynamoDB table from environment variables.\n    USERS_TABLE_NAME = os.environ.get(\"USERS_TABLE_NAME\")\n\n    # Initialize a DynamoDB resource using boto3.\n    dynamodb = boto3.resource(\"dynamodb\")\n\n    # Reference the specific DynamoDB table by name.\n    users_table = dynamodb.Table(USERS_TABLE_NAME)\n\n    # Extract the user ID from the pathParameters provided in the event object.\n    user_id = event[\"pathParameters\"].get(\"user_id\")\n\n    # Retrieve the user item from the DynamoDB table using the extracted ID.\n    user = users_table.get_item(Key={\"PK\": user_id}).get(\"Item\")\n\n    # Reformat the user item into the desired output structure.\n    user = {\"name\": user[\"name\"], \"age\": user[\"age\"]}\n\n    # Return the user data with a 200 status code, ensuring the body is properly JSON-encoded.\n    return {\"statusCode\": 200, \"body\": json.dumps(user, default=str)}\n</code></pre>"},{"location":"examples/page3/#configuration-class_1","title":"Configuration Class","text":"<p>The config class below outlines the configuration necessary for establishing the GetUser function within AWS, illustrating the seamless integration of AWS Lambda and API Gateway to expose a user data retrieval endpoint.</p> functions/users/get_user/config.py<pre><code>from infra.services import Services\n\n\nclass GetUserConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"GetUser\",\n            path=\"./functions/users\",\n            description=\"Retrieve user information by ID\",\n            directory=\"get_user\",\n            environment={\n                \"USERS_TABLE_NAME\": services.dynamo_db.users_table.table_name,\n            },\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/users/{user_id}\", function, public=True)\n\n        services.dynamo_db.users_table.grant_read_data(function)\n</code></pre>"},{"location":"examples/page3/#implementing-the-update-functionality","title":"Implementing the Update Functionality","text":"<p>Let's utilize Forge once again to swiftly establish a tailored structure, setting the stage for our Update User functionality.</p> <pre><code>forge function update_user --method \"PUT\" --description \"Update an user by ID\" --belongs-to users --endpoint \"/users/{user_id}\" --public\n</code></pre> <p>As expected, after using the forge command to generate the <code>update_user</code> function, a predefined directory structure is created.</p> <pre><code>functions\n\u2514\u2500\u2500 users\n    \u251c\u2500\u2500 create_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u251c\u2500\u2500 get_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u251c\u2500\u2500 update_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"examples/page3/#core-logic_2","title":"Core Logic","text":"<p>Below is the implementation for updating a user, allowing changes to either the name or age.</p> functions/users/update_user/main.py<pre><code>import json\nfrom dataclasses import dataclass\nimport os\nimport boto3\n\n\n@dataclass\nclass Path:\n    user_id: str\n\n\n@dataclass\nclass Input:\n    name: str\n    age: int\n\n\n@dataclass\nclass Output:\n    message: str\n\ndef lambda_handler(event, context):\n    # Retrieve the DynamoDB table name from environment variables set in the Lambda configuration\n    USERS_TABLE_NAME = os.environ.get(\"USERS_TABLE_NAME\")\n\n    # Initialize a DynamoDB resource using boto3, AWS's SDK for Python\n    dynamodb = boto3.resource(\"dynamodb\")\n\n    # Reference the DynamoDB table using the retrieved table name\n    users_table = dynamodb.Table(USERS_TABLE_NAME)\n\n    # Extract the user ID from the pathParameters of the event object passed to the Lambda\n    user_id = event[\"pathParameters\"].get(\"user_id\")\n\n    # Parse the JSON body from the event object to get the user data\n    body = json.loads(event[\"body\"])\n\n    # Update the specified user item in the DynamoDB table with the provided name and age\n    users_table.put_item(Item={\"PK\": user_id, \"name\": body[\"name\"], \"age\": body[\"age\"]})\n\n    # Return a response indicating successful user update, with a 200 HTTP status code\n    return {\n        \"statusCode\": 200,\n        \"body\": json.dumps({\"message\": \"User updated\"}, default=str),\n    }\n</code></pre>"},{"location":"examples/page3/#configuration-class_2","title":"Configuration Class","text":"<p>Here's the configuration needed for the <code>update user</code> function to properly engage with the essential AWS services.</p> functions/users/update_user/config.py<pre><code>from infra.services import Services\n\nclass UpdateUserConfig:\n  def __init__(self, services: Services) -&gt; None:\n\n    function = services.aws_lambda.create_function(\n        name=\"UpdateUser\",\n        path=\"./functions/users\",\n        description=\"Update an User\",\n        directory=\"update_user\",\n        environment={\n            \"USERS_TABLE_NAME\": services.dynamo_db.users_table.table_name,\n        },\n    )\n\n    services.api_gateway.create_endpoint(\"PUT\", \"/users/{user_id}\", function, public=True)\n\n    services.dynamo_db.users_table.grant_write_data(function)\n</code></pre>"},{"location":"examples/page3/#implementing-the-delete-functionality","title":"Implementing the Delete Functionality","text":"<p>Now, to complete our CRUD application, let's proceed with constructing the Delete User endpoint.</p> <pre><code>forge function delete_user --method \"DELETE\" --description \"Delete an user by ID\" --belongs-to users --endpoint \"/users/{user_id}\" --public\n</code></pre> <p>Upon executing the Forge command, the <code>delete_user</code> folder will appear within the <code>infra/users</code> directory.</p> <pre><code>functions\n\u2514\u2500\u2500 users\n    \u251c\u2500\u2500 create_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u251c\u2500\u2500 delete_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u251c\u2500\u2500 get_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u251c\u2500\u2500 update_user\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"examples/page3/#core-logic_3","title":"Core Logic","text":"<p>Below is the streamlined code for removing a user from DynamoDB using their user ID.</p> functions/users/delete_user/main.py<pre><code>import json\nfrom dataclasses import dataclass\nimport os\nimport boto3\n\n@dataclass\nclass Path:\n    user_id: str\n\n@dataclass\nclass Input:\n    pass\n\n@dataclass\nclass Output:\n    message: str\n\n\ndef lambda_handler(event, context):\n    # Fetch the name of the DynamoDB table from the environment variables.\n    USERS_TABLE_NAME = os.environ.get(\"USERS_TABLE_NAME\")\n\n    # Initialize a DynamoDB resource using the boto3 library.\n    dynamodb = boto3.resource(\"dynamodb\")\n\n    # Reference the DynamoDB table by its name.\n    users_table = dynamodb.Table(USERS_TABLE_NAME)\n\n    # Extract the user ID from the path parameters in the event object.\n    user_id = event[\"pathParameters\"].get(\"user_id\")\n\n    # Delete the item with the specified user ID from the DynamoDB table.\n    users_table.delete_item(Key={\"PK\": user_id})\n\n    # Return a response indicating that the user has been successfully deleted, with a 200 HTTP status code.\n    return {\"statusCode\": 200, \"body\": json.dumps({\"message\": \"User deleted\"})}\n</code></pre>"},{"location":"examples/page3/#configuration-class_3","title":"Configuration Class","text":"<p>Here's how to set up the <code>delete user</code> function for interaction with the required AWS resources.</p> functions/users/delete_user/config.py<pre><code>from infra.services import Services\n\n\nclass DeleteUserConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"DeleteUser\",\n            path=\"./functions/users\",\n            description=\"Delete an User\",\n            directory=\"delete_user\",\n            environment={\n                \"USERS_TABLE_NAME\": services.dynamo_db.users_table.table_name,\n            },\n        )\n\n        services.api_gateway.create_endpoint(\"DELETE\", \"/users/{user_id}\", function, public=True)\n\n        services.dynamo_db.users_table.grant_write_data(function)\n</code></pre>"},{"location":"examples/page3/#deploying-our-serverless-crud-application","title":"Deploying Our Serverless CRUD Application","text":"<p>Fantastic, with our four fundamental operations in place, we're ready for deployment to AWS.</p> <pre><code># Send your changes to stage\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"Developing a CRUD with DynamoDB\"\n\n# Push changes to the 'dev' branch\ngit push origin dev\n\n# Merge 'dev' into 'staging' and push\ngit checkout staging\ngit merge dev\ngit push origin staging\n\n# Finally, merge 'staging' into 'main' and push\ngit checkout main\ngit merge staging\ngit push origin main\n</code></pre> <p></p> <p>For simplicity, we'll focus on demonstrating the processes in the production stage. However, these operations can be similarly conducted using the base URLs for other environments.</p> Prod - Create User<pre><code>curl --request POST \\\n  --url https://api.lambda-forge.com/users \\\n  --data '{\n    \"name\": \"John Doe\",\n    \"age\": 30\n}'\n</code></pre> Prod - Get User<pre><code>curl --request GET \\\n  --url https://api.lambda-forge.com/users/$USER-ID\n</code></pre> Prod - Update User<pre><code>curl --request PUT \\\n  --url https://api.lambda-forge.com/users/$USER-ID \\\n  --data '{\n    \"name\": \"John Doe\",\n    \"age\": 31\n}'\n</code></pre> Prod - Delete User<pre><code>curl --request DELETE \\\n  --url https://api.lambda-forge.com/users/$USER-ID\n</code></pre> <p>Congratulations! \ud83c\udf89 You've successfully deployed your first serverless CRUD application using DynamoDB and Lambda Forge across three different stages! \ud83d\ude80\ud83d\udc69\u200d\ud83d\udcbb</p>"},{"location":"examples/page4/","title":"Converting Image to QR Code with AWS S3, Secrets Manager and Email Notifications","text":"<p>In this part, we're going to cover how to make a function that turns images uploaded by users into QR codes. When a user sends a request, the image gets processed, saved on Amazon S3, and then sent to them via email so they can easily check out the results.</p>"},{"location":"examples/page4/#incorporating-s3-into-the-service-class","title":"Incorporating S3 Into the Service Class","text":"<p>Let's start creating three distinct buckets, each dedicated to a specific stage: <code>Dev-Lambda-Forge-Images</code>, <code>Staging-Lambda-Forge-Images</code> and <code>Prod-Lambda-Forge-Images</code>.</p> <p>Note</p> <p>Keep in mind that your bucket name must be unique across all AWS regions. Therefore, you'll need to select distinct names for your project.</p> <p>Now place the arns on your <code>cdk.json</code>.</p> cdk.json<pre><code>   \"dev\": {\n      \"base_url\": \"https://api.lambda-forge.com/dev\",\n      \"arns\": {\n        \"urls_table\": \"$DEV-URLS-TABLE-ARN\",\n        \"images_bucket\": \"$DEV-IMAGES-BUCKET-ARN\"\n      }\n    },\n    \"staging\": {\n      \"base_url\": \"https://api.lambda-forge.com/staging\",\n      \"arns\": {\n        \"urls_table\": \"$STAGING-URLS-TABLE-ARN\",\n        \"images_bucket\": \"$STAGING-IMAGES-BUCKET-ARN\"\n      }\n    },\n    \"prod\": {\n      \"base_url\": \"https://api.lambda-forge.com\",\n      \"arns\": {\n        \"urls_table\": \"$PROD-URLS-TABLE-ARN\",\n        \"images_bucket\": \"$PROD-IMAGES-BUCKET-ARN\"\n      }\n    }\n</code></pre> <p>The next step involves integrating the S3 service into our service layer, facilitating direct communication with S3 buckets. To achieve this, execute the following command:</p> <p><code>forge service s3</code></p> <p>This command generates a new service file named <code>s3.py</code> within the infra/services directory, as illustrated below:</p> <pre><code>infra\n\u251c\u2500\u2500 services\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 api_gateway.py\n    \u251c\u2500\u2500 aws_lambda.py\n    \u251c\u2500\u2500 dynamo_db.py\n    \u251c\u2500\u2500 layers.py\n    \u2514\u2500\u2500 s3.py\n</code></pre> <p>Below showcases the updated structure of our Service class, now incorporating the S3 service, indicating the successful integration:</p> infra/services/__init__.py<pre><code>from infra.services.s3 import S3\nfrom infra.services.dynamo_db import DynamoDB\nfrom infra.services.api_gateway import APIGateway\nfrom infra.services.aws_lambda import AWSLambda\nfrom infra.services.layers import Layers\n\n\nclass Services:\n    def __init__(self, scope, context) -&gt; None:\n        self.api_gateway = APIGateway(scope, context)\n        self.aws_lambda = AWSLambda(scope, context)\n        self.layers = Layers(scope)\n        self.dynamo_db = DynamoDB(scope, context)\n        self.s3 = S3(scope, context)\n</code></pre> <p>Here is the newly established S3 class:</p> infra/services/s3<pre><code>from aws_cdk import aws_s3 as s3\nfrom aws_cdk import aws_s3_notifications\n\n\nclass S3:\n    def __init__(self, scope, context) -&gt; None:\n\n        # self.s3 = s3.Bucket.from_bucket_arn(\n        #     scope,\n        #     \"S3\",\n        #     bucket_arn=context.resources[\"arns\"][\"s3_arn\"],\n        # )\n        ...\n\n    def create_trigger(self, bucket, function, stages=None):\n        if stages and self.context.stage not in stages:\n            return\n\n        notifications = aws_s3_notifications.LambdaDestination(function)\n        bucket.add_event_notification(s3.EventType.OBJECT_CREATED, notifications)\n</code></pre> <p>As seen, Forge has created the class with a helper method to streamline the creation of a trigger between a bucket and a lambda function.</p> <p>Let's update the class variables to directly reference our recently created bucket.</p> infra/services/s3.py<pre><code>class S3:\n    def __init__(self, scope, context: dict) -&gt; None:\n\n        self.images_bucket = s3.Bucket.from_bucket_arn(\n            scope,\n            \"ImagesBucket\",\n            bucket_arn=context.resources[\"arns\"][\"images_bucket\"],\n        )\n</code></pre> <p>Excellent! This approach configures our framework to utilize each ARN on its designated stage effectively.</p>"},{"location":"examples/page4/#incorporating-secrets-manager-into-the-services-class","title":"Incorporating Secrets Manager into the Services Class","text":"<p>Since we are dealing with emails, we must use usernames and passowrd. Hardcoding email credentials directly into the code exposes them to potential breaches. To mitigate this risk, we'll implement a more secure approach using AWS Secrets Manager, a service designed to safeguard sensitive information such as secret keys.</p> <p>To create a new secrets manager service, simply type:</p> <pre><code>forge service secrets_manager\n</code></pre> <p>Similar to the S3 class, Forge will generate the new service file within the <code>infra/services</code> directory and seamlessly integrate it into the Services class.</p> <pre><code>infra\n\u251c\u2500\u2500 services\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 api_gateway.py\n    \u251c\u2500\u2500 aws_lambda.py\n    \u251c\u2500\u2500 dynamo_db.py\n    \u251c\u2500\u2500 layers.py\n    \u251c\u2500\u2500 s3.py\n    \u2514\u2500\u2500 secrets_manager.py\n</code></pre> <p>Here's the newly established class:</p> infra/services/secrets_manager.py<pre><code>from aws_cdk import aws_secretsmanager as secrets_manager\n\n\nclass SecretsManager:\n    def __init__(self, scope, resources) -&gt; None:\n\n        # self.secrets_manager = secrets_manager.Secret.from_secret_complete_arn(\n        #     scope,\n        #     id=\"SecretsManager\",\n        #     secret_complete_arn=resources[\"arns\"][\"secrets_manager_arn\"],\n        # )\n        pass\n</code></pre> <p>Now, head over to the AWS Secrets Manager panel in the AWS console and create a new secret. Within this secret, store both the email address and an app password.</p> <p>Warning</p> <p>Note that you shouldn't save your regular GMAIL password; instead, use an app password. Refer to Sign in with app passwords to generate your app password.</p> <p>Now that we have the secret ARN in hand, let's proceed to update the Secrets Manager class accordingly.</p> infra/services/secrets_manager.py<pre><code>class SecretsManager:\n    def __init__(self, scope, resources) -&gt; None:\n\n        self.gmail_secret = secrets_manager.Secret.from_secret_complete_arn(\n            scope,\n            id=\"GmailSecret\",\n            secret_complete_arn=\"$GMAIL-SECRET-ARN\",\n        )\n</code></pre>"},{"location":"examples/page4/#using-a-non-public-library-as-lambda-layer","title":"Using a Non-Public Library as Lambda Layer","text":"<p>To convert the image into a qr code, we are going to use an external library called <code>qrcode</code>. Unlike more popular layers, we're dealing with a library for which AWS doesn't provide a public layer.</p> <p>To seamlessly incorporate this library, refer to the article Deploying External Layers to AWS for guidance on deploying the qrcode library. Once you obtain the ARN of your deployed Lambda layer, simply add it to the Layers class.</p> infra/services/layers.py<pre><code>from aws_cdk import aws_lambda as _lambda\nfrom lambda_forge import Path\n\n\nclass Layers:\n    def __init__(self, scope) -&gt; None:\n\n        self.qrcode_layer = _lambda.LayerVersion.from_layer_version_arn(\n            scope,\n            id=\"QrCodeLayer\",\n            layer_version_arn=\"$QR-CODE-LAYER-ARN\",\n        )\n</code></pre> <p>It's essential to include both libraries in our <code>requirements.txt</code> file to ensure they are installed when deploying our application.</p> requirements.txt<pre><code>qrcode==7.4.2\n</code></pre>"},{"location":"examples/page4/#implementing-the-function-to-convert-image-to-qr-code","title":"Implementing the Function to Convert Image to QR Code","text":"<p>With our layers now set up, it's time to create our new function.</p> <pre><code>forge function qrcode --method \"POST\" --description \"Converts an image into a qr code\" --belongs-to \"images\" --no-tests --public --endpoint \"images/qrcode\"\n</code></pre> <p>We now have the following directory:</p> <pre><code>functions\n\u2514\u2500\u2500 images\n    \u251c\u2500\u2500 qrcode\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u2514\u2500\u2500 main.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Let's dive into implementing this function, which will handle user input consisting of a <code>url</code> to convert the image parameter and an <code>email</code> parameter for sending notification.</p> functions/images/img_to_qrcode/main.py<pre><code>import hashlib\nimport json\nimport os\nfrom dataclasses import dataclass\nfrom io import BytesIO\n\nimport boto3\nimport qrcode\n\n\n@dataclass\nclass Input:\n    url: str\n    email: str\n\n\n@dataclass\nclass Output:\n    pass\n\n\ndef lambda_handler(event, context):\n\n    # Parse the input event to get the URL of the image and the S3 bucket name\n    body = json.loads(event[\"body\"])\n    url = body.get(\"url\")\n\n    # Retrieve the S3 bucket name from environment variables\n    bucket_name = os.environ.get(\"BUCKET_NAME\")\n\n    # Generate QR code from the image\n    qr = qrcode.QRCode()\n    qr.add_data(url)\n    qr.make()\n\n    # Create an image from the QR code\n    qr_image = qr.make_image()\n\n    # Convert the QR code image to bytes\n    qr_byte_arr = BytesIO()\n    qr_image.save(qr_byte_arr)\n    qr_byte_arr = qr_byte_arr.getvalue()\n\n    # Create the file name with a hash based on the input URL\n    file_name = f\"{hashlib.md5(url.encode()).hexdigest()}.jpg\"\n\n    # Initialize the S3 client\n    s3_client = boto3.client(\"s3\")\n\n    # Upload the QR code image to S3\n    s3_client.put_object(\n        Bucket=bucket_name,\n        Key=file_name,\n        Body=qr_byte_arr,\n        ContentType=\"image/png\",\n        Metadata={\"url\": url, \"email\": body.get(\"email\")},\n    )\n\n    return {\"statusCode\": 200}\n</code></pre> <p>Essentially, our function retrieves the URL from the parameters provided by the user. It then utilizes the qrcode library to convert the URL into a QR code before storing it in the S3 bucket. Additionally, the function saves the original url along with the associated email as metadata for future reference.</p> <p>Now, it's configuration.</p> functions/images/qrcode/config.py<pre><code>from infra.services import Services\n\n\nclass QrcodeConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"Qrcode\",\n            path=\"./functions/images\",\n            description=\"Converts an image into a qr code\",\n            directory=\"qrcode\",\n            layers=[services.layers.qrcode_layer],\n            environment={\n                \"BUCKET_NAME\": services.s3.images_bucket.bucket_name,\n            },\n        )\n\n        services.api_gateway.create_endpoint(\"POST\", \"/images/qrcode\", function, public=True)\n\n        services.s3.images_bucket.grant_write(function)\n</code></pre>"},{"location":"examples/page4/#implementing-the-mailer-function","title":"Implementing the Mailer Function","text":"<p>It's worth noting that in our previous implementation, we deliberately omitted email notifications. This exemplifies one of the advantages of serverless architecture: the ability to completely decouple functions from each other and initiate notifications through events.</p> <p>This is precisely the approach we're taking with the mailer function. Whenever a file is uploaded to the S3 bucket, an event will be triggered to run this Lambda function. With the assistance of metadata, the mailer Lambda function will be equipped with the necessary information to determine the appropriate email recipients for notifications.</p> <pre><code>forge function mailer --description \"Sends an email based on metadata when image enters the bucket\" --belongs-to \"images\" --no-api --no-tests\n</code></pre> <p>Here's how our updated directory looks now.</p> <pre><code>functions\n\u251c\u2500\u2500 images\n    \u251c\u2500\u2500 mailer\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u2514\u2500\u2500 main.py\n    \u251c\u2500\u2500 qrcode\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u2514\u2500\u2500 main.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Let's whip up an eye-catching HTML layout to give our email a touch of elegance.</p> functions/images/mailer/template.html<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      body {\n        font-family: Arial, sans-serif;\n        margin: 0;\n        padding: 0;\n        background-color: #f4f4f4;\n      }\n      .container {\n        background-color: #ffffff;\n        margin: 10px auto;\n        padding: 20px;\n        max-width: 600px;\n        border-radius: 8px;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      }\n      p {\n        font-size: 16px;\n        line-height: 1.5;\n        color: #555555;\n      }\n      .logo {\n        display: block;\n        margin: 0 auto 20px auto;\n        width: 100px;\n        height: auto;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;img\n        src=\"https://public-lambda-forge-logo.s3.us-east-2.amazonaws.com/wNSN2U7n9NiAKEItWlsrcdJ0RWFyZOmbNvsc6Kht84WsWVxuBz5O.png\"\n        alt=\"Lambda Forge Logo\"\n        class=\"logo\"\n      /&gt;\n      &lt;h1&gt;Your Image Is Ready!&lt;/h1&gt;\n      &lt;p&gt;Hello,&lt;/p&gt;\n      &lt;p&gt;\n        We're excited to let you know that your image has been processed and is\n        now attached to this email.\n      &lt;/p&gt;\n\n      &lt;p&gt;Please check the attachment to view it.&lt;/p&gt;\n\n      &lt;p&gt;\n        Made with \u2764\ufe0f by\n        &lt;b\n          &gt;&lt;a\n            href=\"https://docs.lambda-forge.com\"\n            style=\"color: inherit; text-decoration: none;\"\n            &gt;Lambda Forge&lt;/a\n          &gt;&lt;/b\n        &gt;\n      &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Time to implement the mailer functionality!</p> functions/images/mailer/main.py<pre><code>import os\nimport smtplib\nfrom email.mime.application import MIMEApplication\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nimport boto3\n\n\ndef lambda_handler(event, context):\n    # Initialize the S3 client\n    s3_client = boto3.client(\"s3\")\n\n    # Fetch the SMTP details from the environment variables\n    SMTP_HOST = os.environ[\"SMTP_HOST\"]\n    SMTP_PORT = os.environ[\"SMTP_PORT\"]\n    SMTP_USER = os.environ[\"SMTP_USER\"]\n    SMTP_PASS = os.environ[\"SMTP_PASS\"]\n\n    # Extract the bucket name and the object key from the event\n    record = event[\"Records\"][0]\n    bucket_name = record[\"s3\"][\"bucket\"][\"name\"]\n    object_key = record[\"s3\"][\"object\"][\"key\"]\n\n    # Fetch the image from S3\n    response = s3_client.get_object(Bucket=bucket_name, Key=object_key)\n\n    # Extract the receiver email from the metadata\n    receiver = response[\"Metadata\"][\"email\"]\n\n    # Create the multipart email\n    msg = MIMEMultipart()\n    sender_name = \"Lambda Forge\"\n\n    # Set the 'From' field, including both the name and the email:\n    msg[\"From\"] = f\"{sender_name} &lt;{SMTP_USER}&gt;\"\n    msg[\"To\"] = receiver\n    msg[\"Subject\"] = \"Image Processed Successfully!\"\n\n    # Join the current directory with the filename to get the full path of the HTML file\n    current_directory = os.path.dirname(os.path.abspath(__file__))\n    html_path = os.path.join(current_directory, \"template.html\")\n\n    # Read the HTML content\n    html = open(html_path).read()\n    msg.attach(MIMEText(html, \"html\"))\n\n    # Attach the image\n    image_data = response[\"Body\"].read()\n    file_name = object_key.split(\"/\")[-1]\n    part = MIMEApplication(image_data, Name=file_name)\n    part[\"Content-Disposition\"] = f'attachment; filename=\"{file_name}\"'\n    msg.attach(part)\n\n    # Send the email via Gmail's SMTP server, or use another server if not using Gmail\n    with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:\n        server.login(SMTP_USER, SMTP_PASS)\n        server.sendmail(SMTP_USER, receiver, msg.as_string())\n</code></pre> <p>This function fetches essential email-sending details from environment variables such as <code>SMTP_HOST</code>, <code>SMTP_PORT</code>, <code>SMTP_USER</code>, and <code>SMTP_PASS</code>. It then retrieves the recipient's email address from the bucket's metadata and sends an email with the QR code attached.</p> <p>The elegance of this approach lies in its flexibility. We can incorporate multiple image processors, including tasks like image resizing, applying color filters, facial recognition, and more. None of these processors need to handle email sending directly. By simply saving the processed image inside the bucket, the corresponding functionality is seamlessly applied.</p> <p>Now, let's configure our Mailer function.</p> functions/images/mailer/config.py<pre><code>from infra.services import Services\n\n\nclass MailerConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"Mailer\",\n            path=\"./functions/images\",\n            description=\"Sends an email when an image enters the bucket\",\n            directory=\"mailer\",\n            environment={\n                \"SMTP_HOST\": \"smtp.gmail.com\",\n                \"SMTP_PORT\": \"465\",\n                \"SMTP_USER\": services.secrets_manager.gmail_secret.secret_value_from_json(\"email\").unsafe_unwrap(),\n                \"SMTP_PASS\": services.secrets_manager.gmail_secret.secret_value_from_json(\"password\").unsafe_unwrap(),\n            },\n        )\n\n        services.s3.images_bucket.grant_read(function)\n        services.s3.create_trigger(services.s3.images_bucket, function)\n</code></pre> <p>With our existing setup, we configure the environment variables and grant read permissions to the function for accessing the bucket. Additionally, we utilize Forge's helper method to establish a trigger that activates when an object is created in the bucket, invoking the function.</p>"},{"location":"examples/page4/#mitigating-security-risks-in-mailer-configuration","title":"Mitigating Security Risks in Mailer Configuration","text":"<p>Although the <code>/mailer/config.py</code> file may seem functional, its implementation poses a significant security risk. Hardcoding credentials directly into environment variables exposes them to potential breaches, as the secret will be visible on the Lambda Function panel.</p> <p></p> <p>To mitigate this risk, let's modify our <code>main.py</code> file slightly. Instead of retrieving the Gmail credentials from environment variables, we'll directly retrieve them from AWS Secrets Manager.</p> functions/images/mailer/main.py<pre><code>def lambda_handler(event, context):\n    # Initialize the S3 client\n    s3_client = boto3.client(\"s3\")\n\n    # Fetch the SMTP details from the environment variables\n    SMTP_HOST = os.environ[\"SMTP_HOST\"]\n    SMTP_PORT = os.environ[\"SMTP_PORT\"]\n\n    import json\n\n    # Initialize the Secrets Manager client\n    sm_client = boto3.client('secretsmanager')\n    secret_name = '$SECRET-NAME'\n\n    # Retrieve the secret value from Secrets Manager\n    response = sm_client.get_secret_value(SecretId=secret_name)\n    secret = json.loads(response['SecretString'])\n\n    # Extract SMTP credentials from the secret data\n    SMTP_USER = secret[\"email\"]\n    SMTP_PASS = secret[\"password\"]\n</code></pre> <p>That's quite a bit of boilerplate code for such a straightforward task! \ud83d\ude30 Considering the critical importance of security, we'll probably employ this code snippet in numerous functions.</p>"},{"location":"examples/page4/#creating-a-custom-layer-to-avoid-code-duplication","title":"Creating a Custom Layer to Avoid Code Duplication","text":"<p>To avoid duplicating the previous code throughout our project, let's establish a new <code>sm_utils</code> custom layer. This approach will streamline the process, allowing all lambda functions that need to retrieve a secret from Secrets Manager to do so with just a single line of code.</p> <p>Check out AWS Lambda Development with Custom Layers to delve deeper into custom layers in Lambda development.</p> <p>To create the new custom layer, simply type:</p> <pre><code>forge layer --custom sm_utils\n</code></pre> <p>This command creates the following directory:</p> <pre><code>layers\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 sm_utils\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 sm_utils.py\n</code></pre> <p>Additionally, a new layer has been incorporated into the Layers class.</p> infra/services/layers<pre><code>        self.qrcode_layer = _lambda.LayerVersion.from_layer_version_arn(\n            scope,\n            id=\"QrCodeLayer\",\n            layer_version_arn=\"arn:aws:lambda:us-east-2:211125768252:layer:QRCode:1\",\n        )\n\n        self.sm_utils_layer = _lambda.LayerVersion(\n            scope,\n            id='SmUtilsLayer',\n            code=_lambda.Code.from_asset(Path.layer('layers/sm_utils')),\n            compatible_runtimes=[_lambda.Runtime.PYTHON_3_9],\n            description='',\n         )\n</code></pre> <p>Now, it's time to level up the sm_utils layer by introducing a <code>get_secret</code> function. This handy feature will be shared across all our Lambda functions, simplifying our codebase.</p> layers/sm_utils/sm_utils.py<pre><code>import json\n\nimport boto3\n\n\ndef get_secret(secret_name: str):\n\n    # Initialize the Secrets Manager client\n    sm_client = boto3.client(\"secretsmanager\")\n\n    # Retrieve the secret value from Secrets Manager\n    response = sm_client.get_secret_value(SecretId=secret_name)\n    try:\n        secret = json.loads(response[\"SecretString\"])\n    except json.JSONDecodeError:\n        secret = response[\"SecretString\"]\n\n    return secret\n</code></pre> <p>Note</p> <p>Given the intention to utilize this function across multiple functions, a few improvements were made to accommodate a broader range of functions. Notably, it now accommodates scenarios where the secret is stored in plain text instead of JSON format.</p>"},{"location":"examples/page4/#refactoring-the-mailer-function-to-use-custom-layers","title":"Refactoring The Mailer Function to Use Custom Layers","text":"<p>Below is the updated <code>main.py</code> file, now leveraging the newly integrated layer.</p> functions/images/mailer/main.py<pre><code>import os\nimport smtplib\nfrom email.mime.application import MIMEApplication\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nimport boto3\nimport sm_utils\n\n\ndef lambda_handler(event, context):\n    # Initialize the S3 client\n    s3_client = boto3.client(\"s3\")\n\n    # Fetch the SMTP details from the environment variables\n    SMTP_HOST = os.environ[\"SMTP_HOST\"]\n    SMTP_PORT = os.environ[\"SMTP_PORT\"]\n\n    # Get the secret name from env variable\n    SECRET_NAME = os.environ[\"SECRET_NAME\"]\n\n    # Get the secret from sm_utils layer\n    secret = sm_utils.get_secret(SECRET_NAME)\n\n    SMTP_USER = secret[\"email\"]\n    SMTP_PASS = secret[\"password\"]\n\n    # Extract the bucket name and the object key from the event\n    record = event[\"Records\"][0]\n    bucket_name = record[\"s3\"][\"bucket\"][\"name\"]\n    object_key = record[\"s3\"][\"object\"][\"key\"]\n\n    # Fetch the image from S3\n    response = s3_client.get_object(Bucket=bucket_name, Key=object_key)\n\n    # Extract the receiver email from the metadata\n    receiver = response[\"Metadata\"][\"email\"]\n\n    # Create the multipart email\n    msg = MIMEMultipart()\n    sender_name = \"Lambda Forge\"\n\n    # Set the 'From' field, including both the name and the email:\n    msg[\"From\"] = f\"{sender_name} &lt;{SMTP_USER}&gt;\"\n    msg[\"To\"] = receiver\n    msg[\"Subject\"] = \"Image Processed Successfully!\"\n\n    # Join the current directory with the filename to get the full path of the HTML file\n    current_directory = os.path.dirname(os.path.abspath(__file__))\n    html_path = os.path.join(current_directory, \"template.html\")\n\n    # Read the HTML content\n    html = open(html_path).read()\n    msg.attach(MIMEText(html, \"html\"))\n\n    # Attach the image\n    image_data = response[\"Body\"].read()\n    file_name = object_key.split(\"/\")[-1]\n    part = MIMEApplication(image_data, Name=file_name)\n    part[\"Content-Disposition\"] = f'attachment; filename=\"{file_name}\"'\n    msg.attach(part)\n\n    # Send the email via Gmail's SMTP server, or use another server if not using Gmail\n    with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:\n        server.login(SMTP_USER, SMTP_PASS)\n        server.sendmail(SMTP_USER, receiver, msg.as_string())\n</code></pre> <p>Now, let's adjust the configuration to accommodate the changes necessary for the function.</p> functions/images/mailer/config.py<pre><code>from infra.services import Services\n\n\nclass MailerConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"Mailer\",\n            path=\"./functions/images\",\n            description=\"Sends an email when an image enters the bucket\",\n            directory=\"mailer\",\n            layers=[services.layers.sm_utils_layer],\n            environment={\n                \"SMTP_HOST\": \"smtp.gmail.com\",\n                \"SMTP_PORT\": \"465\",\n                \"SECRET_NAME\": services.secrets_manager.gmail_secret.secret_name,\n            },\n        )\n\n        services.s3.images_bucket.grant_read(function)\n        services.s3.create_trigger(services.s3.images_bucket, function)\n\n        services.secrets_manager.gmail_secret.grant_read(function)\n</code></pre>"},{"location":"examples/page4/#deploying-the-functions","title":"Deploying The Functions","text":"<p>Next, we'll commit our code and push it to GitHub, following these steps:</p> <pre><code># Send your changes to stage\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"Image to QR code converter with result being sent by email\"\n\n# Push changes to the 'dev' branch\ngit push origin dev\n\n# Merge 'dev' into 'staging' and push\ngit checkout staging\ngit merge dev\ngit push origin staging\n\n# Finally, merge 'staging' into 'main' and push\ngit checkout main\ngit merge staging\ngit push origin main\n</code></pre> <p>This process guarantees that our code transitions systematically through the development, staging, and production environments. It activates our three specialized deployment pipelines, as illustrated by the pipelines running in the accompanying image.</p> <p></p> <p>Following the successful execution of these pipelines, the Image to QR code feature becomes accessible across the development, staging, and production stages, ensuring a seamless deployment.</p>"},{"location":"examples/page4/#testing-the-image-to-qr-code-conversion","title":"Testing the Image to QR Code Conversion","text":"<p>We'll walk through testing our Image to QR Code Converter, focusing on the production environment for this demonstration. The procedure remains consistent across development and staging environments, with the only difference being the specific endpoints used.</p> <p>To convert an image URL into a QR code, we execute the following POST request:</p> <pre><code>curl --request POST \\\n  --url https://api.lambda-forge.com/images/qrcode \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"url\": \"https://public-lambda-forge-logo.s3.us-east-2.amazonaws.com/wNSN2U7n9NiAKEItWlsrcdJ0RWFyZOmbNvsc6Kht84WsWVxuBz5O.png\",\n    \"email\": \"$EMAIL\"\n}'\n</code></pre> <p>Shortly after the request is made, an email is dispatched to the provided address. </p> <p>The email contains a QR code attachment, as seen in the illustration below:</p> <p> </p> <p>Upon scanning the QR code, the original image is displayed:</p> <p></p> <p>\ud83c\udf89 Success! The Image to QR Code Converter function is now fully deployed and operational in all environments. \ud83d\ude80\u2728</p>"},{"location":"examples/page5/","title":"Implementing JWT Authentication with Dynamo DB, Secrets Manager and KMS","text":"<p>Coming soon...</p>"},{"location":"examples/page6/","title":"Building a Real-Time Chat Application with WebSockets and DynamoDB in a Serverless Architecture","text":"<p>Coming soon...</p>"},{"location":"examples/page7/","title":"Creating a Serverless Web Scraper: Integrating DynamoDB, SNS and EventBridge","text":"<p>In this section, we will develop a serverless web scraper designed to extract informations about books from https://books.toscrape.com/ utilizing the Requests library and Beautiful Soup. The retrieved data will be stored in DynamoDB, enabling us to perform queries via an endpoint.</p> <p>Additionally, we will cover how to configure our Lambda function to execute daily, ensuring our dataset remains current and accurate.</p>"},{"location":"examples/page7/#dynamo-db","title":"Dynamo DB","text":"<p>Considering the write access to our database will be exclusively reserved for the scraper, maintaining three separate databases for each deployment stage is unnecessary. Therefore, let's just create a singular DynamoDB table designed to serve all three environments uniformly.</p> <p>Instead of setting up each environment's details separately in the <code>cdk.json</code> file, like we did to the users table, we'll make things simpler by creating a single Books table on the AWS console and placing its ARN directly into our DynamoDB class.</p> infra/services/dynamo_db.py<pre><code>class DynamoDB:\n  def __init__(self, scope, resources: dict) -&gt; None:\n\n      self.users_table = dynamo_db.Table.from_table_arn(\n          scope,\n          \"UsersTable\",\n          resources[\"arns\"][\"users_table\"],\n      )\n\n      self.books_table = dynamo_db.Table.from_table_arn(\n          scope,\n          \"BooksTable\",\n          \"$BOOKS-TABLE-ARN\",\n      )\n</code></pre>"},{"location":"examples/page7/#lambda-layers","title":"Lambda Layers","text":"<p>Another essential aspect of our project involves leveraging external libraries like <code>requests</code> and <code>Beautiful Soup</code> for our web scraping tasks. Since these libraries are not built into Python's standard library, we'll need to incorporate them into our AWS Lambda functions as Lambda Layers.</p>"},{"location":"examples/page7/#incorporating-requests-and-beautiful-soup-via-public-layers","title":"Incorporating Requests and Beautiful Soup via Public Layers","text":"<p>The <code>requests</code> and <code>Beautiful Soup</code> libraries are widely used and recognized for their utility in web scraping and data extraction tasks. Fortunately, AWS Lambda offers these libraries as public layers, simplifying the process of integrating them into your projects without the need to create custom layers.</p> <p>For projects utilizing Python 3.9, we can leverage the specific Amazon Resource Names (ARNs) for both requests and Beautiful Soup libraries made available through Klayers. This provides an efficient way to add these libraries to your Lambda functions. You can explore the complete list of public layers for Python 3.9 in the <code>us-east-2</code> region here.</p> <p>Here are the ARNs you'll need:</p> <ul> <li> <p>Requests: <code>arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p39-requests:19</code></p> </li> <li> <p>Beautiful Soup 4: <code>arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p39-beautifulsoup4:7</code></p> </li> </ul> <p>Let's add them both to our Layers class.</p> infra/services/layers.py<pre><code>from aws_cdk import aws_lambda as _lambda\n\n\nclass Layers:\n    def __init__(self, scope) -&gt; None:\n\n        self.requests_layer = _lambda.LayerVersion.from_layer_version_arn(\n            scope,\n            id=\"RequestsLayer\",\n            layer_version_arn=\"arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p39-requests:19\",\n        )\n\n        self.bs4_layer = _lambda.LayerVersion.from_layer_version_arn(\n            scope,\n            id=\"BS4Layer\",\n            layer_version_arn=\"arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p39-beautifulsoup4:7\",\n        )\n</code></pre> <p>Additionally, include the libraries in the <code>requirements.txt</code> file.</p> requirements.txt<pre><code>requests==2.28.1\nbeautifulsoup4==4.12.3\n</code></pre>"},{"location":"examples/page7/#developing-the-web-scraper","title":"Developing The Web Scraper","text":"<p>Our web scraper will extract the following details: <code>upc</code>, <code>title</code>, <code>price</code>, <code>category</code>, <code>stock</code>, <code>description</code> and <code>url</code>.</p> <p>Let's create it with forge.</p> <pre><code>forge function scraper --description \"Web scraper to populate Dynamo with books data\" --no-api --belongs-to books\n</code></pre> <p>Remember, although users can access the scraper's results, the scraper itself won't serve as a direct endpoint. We've included the <code>--no-api</code> flag in our Forge setup to signify that this function won't be connected to the API Gateway. Its primary role is to enrich our database. Additionally, the <code>--belongs-to</code> flag was used to organize it within the <code>books</code> directory, aligning it with related functions planned for the future.</p> <p>Here is the structure created for the books directory:</p> <pre><code>functions\n\u251c\u2500\u2500 books\n   \u251c\u2500\u2500 scraper\n   \u2502   \u251c\u2500\u2500 __init__.py\n   \u2502   \u251c\u2500\u2500 config.py\n   \u2502   \u251c\u2500\u2500 main.py\n   \u2502   \u2514\u2500\u2500 unit.py\n   \u2514\u2500\u2500 utils\n       \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"examples/page7/#building-a-web-scraper-with-pagination-handling-using-a-while-loop","title":"Building a Web Scraper with Pagination Handling Using a While Loop","text":"<p>Our focus is on understanding how AWS resources are integrated with Lambda Forge, not on the intricacies of developing a web scraper. Therefore, we will not cover the source code in detail. Nevertheless, we encourage you to experiment with creating your own web scraper, as the core concepts we're discussing will remain applicable.</p> <p>Below, you'll find the source code accompanied by comments that explain the concepts it illustrates.</p> functions/books/scraper/main.py<pre><code>import os\nimport re\nimport boto3\nimport requests\nfrom bs4 import BeautifulSoup\n\nBASE_URL = \"https://books.toscrape.com\"\n\ndef lambda_handler(event, context):\n\n    # DynamoDB table name for storing books information\n    BOOKS_TABLE_NAME = os.environ.get(\"BOOKS_TABLE_NAME\")\n\n    # Initialize a DynamoDB resource\n    dynamodb = boto3.resource(\"dynamodb\")\n\n    # Reference the DynamoDB table\n    books_table = dynamodb.Table(BOOKS_TABLE_NAME)\n\n    # Determine the URL to scrape, defaulting to BASE_URL\n    url = event.get(\"url\") or BASE_URL\n\n    while url:\n        # Fetch and parse the webpage at the given URL\n        response = requests.get(url)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n\n        for article in soup.find_all(\"article\"):\n            # Extract book details\n            title = article.find(\"h3\").find(\"a\").get(\"title\").title()\n            price = article.find(\"p\", {\"class\": \"price_color\"}).get_text()[1:]\n\n            # Correct the href if it doesn't contain \"catalogue/\"\n            href = article.find(\"h3\").find(\"a\").get(\"href\")\n            if \"catalogue/\" not in href:\n                href = f\"catalogue/{href}\"\n\n            # Fetch and parse the book detail page\n            url = f\"{BASE_URL}/{href}\"\n            detail_response = requests.get(url)\n            detail_soup = BeautifulSoup(detail_response.text, \"html.parser\")\n\n            # Extract additional details from the book detail page\n            upc = detail_soup.find(\"th\", string=\"UPC\").find_next(\"td\").get_text().strip()\n            category = (\n                detail_soup.find(\"ul\", {\"class\", \"breadcrumb\"})\n                .find_all(\"li\")[2]\n                .text.strip()\n            )\n            stock = (\n                detail_soup.find(\"p\", {\"class\": \"instock availability\"}).get_text().strip()\n            )\n            stock = re.search(r\"\\d+\", stock)[0]\n            description = detail_soup.find(\"div\", {\"id\": \"product_description\"})\n            if description:\n                description = description.find_next(\"p\").get_text()\n\n            # Construct the item to store in DynamoDB\n            item = {\n                \"PK\": upc,\n                \"category\": category,\n                \"title\": title,\n                \"price\": price,\n                \"description\": description,\n                \"stock\": stock,\n                \"url\": url,\n            }\n\n            # Store the item in DynamoDB\n            books_table.put_item(Item=item)\n\n        # Check for and process the next page\n        next_page = soup.find(\"li\", {\"class\": \"next\"})\n        if next_page:\n            next_href = next_page.find(\"a\")[\"href\"]\n            if \"catalogue/\" not in next_href:\n                next_href = f\"catalogue/{next_href}\"\n            url = f\"{BASE_URL}/{next_href}\"\n        else:\n            url = None\n</code></pre> <p>Due to AWS's predefined operational constraints, Lambda functions are explicitly engineered for rapid execution, with a maximum duration limit of 15 minutes.</p> <p>To evaluate the efficiency of our function, we will incorporate print statements that monitor execution time throughout our local testing phase.</p> <pre><code>Execution time: 1024.913999080658 seconds\n</code></pre> <p>The execution time approaches nearly 17 minutes, exceeding the maximum duration allowed for a Lambda function. Consequently, we need to seek alternative strategies to ensure our scraper remains compliant with the limitations.</p> <p>Utilizing a while loop within a solitary AWS Lambda function to perform book data extraction from the website is functional yet lacks efficiency and scalability. This is particularly pertinent within the AWS ecosystem, which is rich in services tailored for distributed computing and intricate task orchestration.</p>"},{"location":"examples/page7/#building-a-web-scraper-with-pagination-handling-using-sns","title":"Building a Web Scraper with Pagination Handling Using SNS","text":"<p>Amazon Simple Notification Service (SNS) is a fully managed messaging service provided by AWS, enabling seamless communication between distributed systems. It operates on a publish-subscribe model, where messages are published to topics and subscribers receive notifications from these topics. With support for various types of subscriptions including HTTP, SQS, Lambda, email, and SMS, SNS ensures reliable and scalable message delivery across multiple AWS regions. It also offers features like message filtering, retry mechanisms, and dead-letter queues to enhance message processing and system resilience.</p> <p>Instead of using a while loop to process all pages in a single function, let's design a Lambda function to process a maximum of 10 pages. After completing these pages, it should dispatch a message with the URL of the next starting page to an SNS topic. This triggers another Lambda function dedicated to harvesting book information from the subsequent 10 pages.</p> <p>As an initial step, we have to integrate SNS into our Services class.</p> <pre><code>forge service sns\n</code></pre> <p>A new <code>sns.py</code> file was created on <code>infra/services</code>, so create a new SNS topic on the AWS console and place it's ARN on the SNS class.</p> infra/services/sns.py<pre><code>from aws_cdk import aws_lambda_event_sources\nimport aws_cdk.aws_sns as sns\n\n\nclass SNS:\n    def __init__(self, scope, resources, stage) -&gt; None:\n        self.stage = stage\n\n        self.books_scraper_topic = sns.Topic.from_topic_arn(\n            scope,\n            \"BooksScraperTopic\",\n            topic_arn=\"$TOPIC-ARN\",\n        )\n\n    def create_trigger(self, topic, function, stages=None):\n        if stages and self.stage not in stages:\n            return\n\n        sns_subscription = aws_lambda_event_sources.SnsEventSource(topic)\n        function.add_event_source(sns_subscription)\n</code></pre> <p>Note that the SNS class contains a handy helper method, streamlining the process of establishing triggers that connect an SNS topic to a Lambda function.</p> <p>Now, let's revise the original code to eliminate the while loop that processes all pages and instead publish a message to SNS containing the URL of the new starting point.</p> functions/books/scraper/main.py<pre><code>import os\nimport re\nimport json\nimport time\nimport boto3\nimport requests\nfrom bs4 import BeautifulSoup\n\nBASE_URL = \"https://books.toscrape.com\"\n\ndef lambda_handler(event, context):\n    # Get the DynamoDB table name and SNS topic ARN from environment variables.\n    BOOKS_TABLE_NAME = os.environ.get(\"BOOKS_TABLE_NAME\", \"Books\")\n    SNS_TOPIC_ARN = os.environ.get(\"SNS_TOPIC_ARN\")\n\n    # Initialize the DynamoDB and SNS clients.\n    dynamodb = boto3.resource(\"dynamodb\")\n    sns = boto3.client(\"sns\")\n\n    # Reference the DynamoDB table.\n    books_table = dynamodb.Table(BOOKS_TABLE_NAME)\n\n    # Determine the URL to scrape, defaulting to BASE_URL\n    try:\n        url = json.loads(event['Records'][0]['Sns']['Message'].replace(\"'\", '\"'))[\"url\"]\n    except:\n        url = BASE_URL\n\n    # Keep track of the number of pages processed\n    pages_processed = 0\n\n    # Maximum number of pages to process\n    MAX_PAGES = 10\n\n    while pages_processed &lt; MAX_PAGES:\n        response = requests.get(url)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n\n        for article in soup.find_all(\"article\"):\n            # Extract book details\n            title = article.find(\"h3\").find(\"a\").get(\"title\").title()\n            price = article.find(\"p\", {\"class\": \"price_color\"}).get_text()[1:]\n\n            # Correct the href if it doesn't contain \"catalogue/\"\n            href = article.find(\"h3\").find(\"a\").get(\"href\")\n            if \"catalogue/\" not in href:\n                href = f\"catalogue/{href}\"\n\n            # Fetch and parse the book detail page\n            detail_url = f\"{BASE_URL}/{href}\"\n            detail_response = requests.get(detail_url)\n            detail_soup = BeautifulSoup(detail_response.text, \"html.parser\")\n\n            # Extract additional details from the book detail page\n            upc = detail_soup.find(\"th\", string=\"UPC\").find_next(\"td\").get_text().strip()\n            category = (\n                detail_soup.find(\"ul\", {\"class\", \"breadcrumb\"})\n                .find_all(\"li\")[2]\n                .text.strip()\n            )\n            description = detail_soup.find(\"div\", {\"id\": \"product_description\"})\n            stock = (\n                detail_soup.find(\"p\", {\"class\": \"instock availability\"})\n                .get_text().strip()\n            )\n            stock = re.search(r\"\\d+\", stock)[0]\n            if description:\n                description = description.find_next(\"p\").get_text()\n\n            # Construct the item to store in DynamoDB\n            item = {\n                \"PK\": upc,\n                \"category\": category,\n                \"title\": title,\n                \"price\": price,\n                \"description\": description,\n                \"stock\": stock,\n                \"url\": detail_url,\n            }\n\n            # Store the item in DynamoDB\n            books_table.put_item(Item=item)\n\n        # Increment the number of pages processed\n        pages_processed += 1\n\n        # Check for the next page\n        next_page = soup.find(\"li\", {\"class\": \"next\"})\n        if not next_page:\n            break\n\n        # Correct the href if it doesn't contain \"catalogue/\"\n        next_href = next_page.find(\"a\")[\"href\"]\n        if \"catalogue/\" not in next_href:\n            next_href = f\"catalogue/{next_href}\"\n\n        # Construct the URL for the next page\n        url = f\"{BASE_URL}/{next_href}\"\n\n    if next_page:\n        # Publish a message to the SNS topic to process the next 10 pages\n        sns.publish(\n            TopicArn=SNS_TOPIC_ARN,\n            Message=str({\"url\": url}),\n            Subject=f\"Process next {MAX_PAGES} pages of books\",\n        )\n</code></pre> <p>Let's measure how long that function took to run locally:</p> <pre><code>Execution time: 167.53530287742615 seconds\n</code></pre> <p>Fantastic, it took under 3 minutes!</p> <p>This approach ensures that we never exceed the 15 minutes timeout limit, as each time a new message is published to SNS, the timeout counter is refreshed, allowing continuous execution without interruption.</p>"},{"location":"examples/page7/#configuring-the-web-scraper","title":"Configuring The Web Scraper","text":"<p>Now that we have developed our function, let's proceed to configure the necessary AWS resources for its executions on the cloud.</p> functions/books/scraper/config.py<pre><code>from infra.services import Services\n\n\nclass ScraperConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"Scraper\",\n            path=\"./functions/books\",\n            description=\"Web scraper to populate Dynamo with books data\",\n            directory=\"scraper\",\n            timeout=5,\n            layers=[services.layers.requests_layer, services.layers.bs4_layer],\n            environment={\n                \"BOOKS_TABLE_NAME\": services.dynamo_db.books_table.table_name,\n                \"SNS_TOPIC_ARN\": services.sns.books_scraper_topic.topic_arn\n            }\n        )\n\n        services.dynamo_db.books_table.grant_write_data(function)\n\n        services.sns.create_trigger(services.sns.books_scraper_topic, function)\n        services.sns.books_scraper_topic.grant_publish(function)\n</code></pre> <p>This configuration file outlines the setup and permissions for a Lambda function, detailing:</p> <ul> <li>Timeout: Specifies a maximum duration of 5 minutes for Lambda execution.</li> <li>Layers: Adds the requests and bs4 layers to the Lambda function.</li> <li>Environment Variables: Establishes the required environment variables for operation.</li> <li>DynamoDB Access: Provides the Lambda function with write access to the DynamoDB Books table.</li> <li>SNS Trigger: Utilizes the SNS class helper method to link an SNS topic with the production Lambda function.</li> <li>SNS Publishing Permissions: Empowers the Lambda function to publish messages to the books topic.</li> </ul>"},{"location":"examples/page7/#scheduling-executions-with-event-bridge","title":"Scheduling Executions With Event Bridge","text":"<p>The current configuration file equips us to execute the Lambda function as needed. However, it necessitates manual intervention for each run, which is an impractical approach for dynamic tasks like web scraping. The crux of the issue lies in the volatile nature of our target: website data, such as book prices and inventory, can change unpredictably.</p> <p>To mitigate this, we must ensure our web scraper operates automatically at regular intervals, thus capturing updates without manual oversight. By leveraging AWS EventBridge, we can schedule our Lambda function to run periodically, ensuring our data collection remains current with minimal effort.</p> <p>To integrate AWS EventBridge for scheduling tasks, we begin by creating an EventBridge class using Forge. This is achieved with the following command:</p> <pre><code>forge service event_bridge\n</code></pre> <p>After executing the command, a new file named <code>event_bridge.py</code> is generated within the <code>infra/services</code> directory. Let's explore its contents and functionalities:</p> infra/services/event_bridge.py<pre><code>import aws_cdk.aws_events as events\nimport aws_cdk.aws_events_targets as targets\n\n\nclass EventBridge:\n    def __init__(self, scope, resources, stage) -&gt; None:\n        self.scope = scope\n        self.stage = stage\n\n    def create_rule(self, name, expression, target, stages=None):\n        if stages is not None and self.stage not in stages:\n            return\n\n        events.Rule(\n            self.scope,\n            name,\n            schedule=events.Schedule.expression(expression),\n            targets=[targets.LambdaFunction(handler=target)],\n        )\n</code></pre> <p>This class introduces a streamlined method for creating EventBridge rules, enabling the scheduling of Lambda function executions.</p> <p>Before we proceed, it's crucial to acknowledge that we're operating within a multi-stage deployment environment. Our immediate task involves configuring the Scraper function to activate based on a scheduled rule. However, a pertinent question arises: Should we initiate the triggering of three distinct functions simultaneously? Of course not, especially when considering efficiency and resource management. More precisely, is there a need for creating three scrapers when, in reality, only one is enough to populate the database?</p> <p>Bearing this consideration in mind, it's wise to implement a few minor adjustments. Our goal is to streamline the process, thereby avoiding the creation of unnecessary scrapers.</p> <p>First, let's modify the <code>LambdaStack</code> class to send also the context to the <code>ScraperConfig</code> class.</p> infra/stacks/lambda_stack.py<pre><code>        # Books\n        ScraperConfig(self.services, context)\n</code></pre> <p>Now, let's modify our configuration class to accept the <code>context</code> as an additional argument in its constructor.</p> <p>By incorporating the context, we can strategically condition the creation of the function based on the deployment stage.</p> functions/books/scraper/config.py<pre><code>from infra.services import Services\n\n\nclass ScraperConfig:\n    def __init__(self, services: Services, context) -&gt; None:\n\n        if context.stage != \"Prod\":\n            return\n\n        function = services.aws_lambda.create_function(\n            name=\"Scraper\",\n            path=\"./functions/books\",\n            description=\"Web scraper to populate Dynamo with books data\",\n            directory=\"scraper\",\n            timeout=5,\n            layers=[services.layers.requests_layer, services.layers.bs4_layer],\n            environment={\n                \"BOOKS_TABLE_NAME\": services.dynamo_db.books_table.table_name,\n                \"SNS_TOPIC_ARN\": services.sns.books_scraper_topic.topic_arn\n            }\n        )\n\n        services.dynamo_db.books_table.grant_write_data(function)\n\n        services.sns.create_trigger(services.sns.books_scraper_topic, function)\n        services.sns.books_scraper_topic.grant_publish(function)\n\n        services.event_bridge.create_rule(\n            name=\"ScraperRule\",\n            expression=\"cron(0 12 ? * * *)\",\n            target=function,\n        )\n</code></pre> <p>The cron expression <code>cron(0 12 ? * * *)</code> configures a schedule to initiate an action every day at 12 PM UTC.</p> <p>Now, we're streamlining our deployment by creating the Lambda function and its essential resources exclusively for the staging environment that will be actively utilized.</p>"},{"location":"examples/page7/#developing-an-endpoint-for-data-access","title":"Developing an Endpoint for Data Access","text":"<p>Let's create an endpoint that returns all the stored data from our database or allows filtering by category, facilitating easy access and manipulation of the data.</p> <pre><code>forge function list_books --method \"GET\" --description \"A function to fetch books from DynamoDB, optionally filtered by category.\" --belongs-to books --public\n</code></pre> <p>The file has been created within the <code>books</code> directory, as initially planned.</p> <pre><code>functions\n\u251c\u2500\u2500 books\n    \u251c\u2500\u2500 list_books\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u251c\u2500\u2500 scraper\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>To optimize data retrieval by category from our DynamoDB table, we need to create a Global Secondary Index (GSI) on the Books Table. This index enables efficient querying and filtering of data based on the <code>category</code> attribute, without the need for scanning the entire table.</p> <p>Go to the DynamoDB section within the AWS Management Console and select the Books Table. Click on the <code>Indexes</code> tab next to the table details, then press <code>Create index</code>. In the creation form, set the partition key to your <code>category</code> column. Name your index as <code>CategoryIndex</code>. After configuring these details, review your settings and confirm by clicking <code>Create index</code>.</p> <p>Having established our index, we can utilize it to precisely and efficiently fetch data by category when needed, significantly optimizing our query performance.</p> functions/books/list_books/main.py<pre><code>import json\nimport os\nfrom dataclasses import dataclass\nfrom typing import List, Optional\n\nimport boto3\nfrom boto3.dynamodb.conditions import Key\n\n@dataclass\nclass Input:\n    category: Optional[str]\n\n@dataclass\nclass Book:\n    id: str\n    title: str\n    price: str\n    category: str\n    stock: str\n    description: str\n    url: str\n\n@dataclass\nclass Output:\n    data: List[Book]\n\ndef lambda_handler(event, context):\n    # Initialize a DynamoDB client\n    dynamodb = boto3.resource(\"dynamodb\")\n\n    # Get the name of the table from the environment variable\n    BOOKS_TABLE_NAME = os.environ[\"BOOKS_TABLE_NAME\"]\n\n    # Create a DynamoDB table resource\n    table = dynamodb.Table(BOOKS_TABLE_NAME)\n\n    # Check if a category is specified in the query string parameters\n    category = (\n        event[\"queryStringParameters\"].get(\"category\")\n        if event[\"queryStringParameters\"]\n        else None\n    )\n\n    processed_items = []\n    last_evaluated_key = None\n\n    # Handle pagination\n    while True:\n        scan_kwargs = {}\n        if category:\n            scan_kwargs.update({\n                'IndexName': \"CategoryIndex\",\n                'KeyConditionExpression': Key(\"category\").eq(category.title())\n            })\n\n        if last_evaluated_key:\n            scan_kwargs['ExclusiveStartKey'] = last_evaluated_key\n\n        if category:\n            response = table.query(**scan_kwargs)\n        else:\n            response = table.scan(**scan_kwargs)\n\n        items = response.get(\"Items\", [])\n\n        # Renaming 'PK' attribute to 'id' in each item\n        processed_items.extend(\n            [{\"id\": item[\"PK\"], **{k: v for k, v in item.items() if k != \"PK\"}} for item in items]\n        )\n\n        last_evaluated_key = response.get('LastEvaluatedKey')\n        if not last_evaluated_key:\n            break\n\n    return {\"statusCode\": 200, \"body\": json.dumps({\"data\": processed_items})}\n</code></pre> <p>Now Let's configure the function</p> functions/books/list_books/config.py<pre><code>from infra.services import Services\n\n\nclass ListBooksConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"ListBooks\",\n            path=\"./functions/books\",\n            description=\"A function to fetch books from DynamoDB, optionally filtered by category.\",\n            directory=\"list_books\",\n            environment={\"BOOKS_TABLE_NAME\": services.dynamo_db.books_table.table_name},\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/books\", function, public=True)\n\n        services.dynamo_db.books_table.grant_read_data(function)\n        services.dynamo_db.add_query_permission(services.dynamo_db.books_table, function)\n</code></pre> <p>In addition to the foundational setup facilitated by Forge, this configuration file plays a crucial role in further customizing our function. It specifically focuses on defining environment variables and granting read permissions to the function for accessing the Books table.</p> <p>Moreover, we leverage a specialized helper method within our DynamoDB class to extend Query permissions to the Lambda function. This distinction is critical as querying entails more specific privileges beyond data reading, ensuring our function has the precise access needed for optimal operation.</p>"},{"location":"examples/page7/#launching-our-web-scraper-and-data-visualization-endpoint","title":"Launching Our Web Scraper and Data Visualization Endpoint","text":"<p>Great, we're all set to deploy our function.</p> <p>Now, we'll commit and push our changes to the remote repository, allowing our CI/CD pipeline to handle the deployment seamlessly.</p> <pre><code># Add changes to the staging area\ngit add .\n\n# Commit the changes with a descriptive message\ngit commit -m \"Deploying Web Scraper and Data Visualization Endpoint\"\n\n# Push changes to the 'dev' branch.\ngit push origin dev\n\n# Switch to the 'staging' branch, merge changes from 'dev', and push\ngit checkout staging\ngit merge dev\ngit push origin staging\n\n# Switch to the 'main' branch, merge changes from 'staging', and push\ngit checkout main\ngit merge staging\ngit push origin main\n</code></pre> <p>Once the pipeline execution concludes, expect to see a single scraper function established.</p> <p></p> <p>Additionally, this function will be configured with two distinct triggers: an SNS trigger and an Event Bridge trigger, each serving a unique purpose in the workflow.</p> <p></p> <p>Now we can also test new endpoints to list the scraped data.</p> <ul> <li>Dev: https://gxjca0e395.execute-api.us-east-2.amazonaws.com/dev/books</li> <li>Staging: https://8kwcovaj0f.execute-api.us-east-2.amazonaws.com/staging/books</li> <li>Prod: https://s6zqhu2pg1.execute-api.us-east-2.amazonaws.com/prod/books</li> </ul> <p>Congratulations! \ud83c\udf89 You've successfully created your first web scraper using Lambda Layers, SNS, DynamoDB and Event Bridge using Lambda Forge. \ud83d\ude80</p>"},{"location":"examples/page8/","title":"Developing a Serverless Chatbot with OpenAI and DynamoDB","text":"<p>Coming soon...</p>"},{"location":"home/page2/","title":"Getting Started","text":""},{"location":"home/page2/#install-and-configure-aws-cdk","title":"Install and Configure AWS CDK","text":"<p>Lambda Forge is built on top of AWS Cloud Development Kit (CDK) and it's essential for defining cloud infrastructure in code and provisioning it through AWS CloudFormation. Execute the following commands to install the AWS CDK globally and set up your AWS credentials:</p> <pre><code>npm install -g aws-cdk\naws configure\ncdk bootstrap\n</code></pre> <p>During the configuration, you will be prompted to enter your AWS Access Key ID, Secret Access Key, default region name, and output format.</p>"},{"location":"home/page2/#create-a-github-personal-access-token","title":"Create a GitHub Personal Access Token","text":"<p>Lambda Forge uses CodePipeline to interact with your GitHub repository. To enable this, generate a GitHub personal access token by following these steps:</p> <ol> <li>Navigate to \"Developer Settings\" in your GitHub account.</li> <li>Select \"Personal access tokens,\" then \"Tokens (classic).\"</li> <li>Click \"Generate new token,\" ensuring the \"repo\" scope is selected for full control of private repositories.</li> <li>Complete the token generation process.</li> </ol> <p>You can find more informations about creating a GitHub Token here.</p> <p>Your token will follow this format: <code>ghp_********************************</code></p>"},{"location":"home/page2/#store-the-token-on-aws-secrets-manager","title":"Store the Token on AWS Secrets Manager","text":"<p>Save this token in AWS Secrets Manager as <code>plain text</code> using the exact name github-token. This specific naming is vital as it corresponds to the default identifier that the CDK looks for within your AWS account.</p>"},{"location":"home/page2/#create-a-new-directory","title":"Create a New Directory","text":"<pre><code>mkdir lambda_forge_demo\ncd lambda_forge_demo\n</code></pre>"},{"location":"home/page2/#create-a-new-virtual-environment","title":"Create a New Virtual Environment","text":"<pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"home/page2/#install-lambda-forge","title":"Install lambda-forge","text":"<pre><code>pip install lambda-forge --extra-index-url https://pypi.org/simple --extra-index-url https://test.pypi.org/simple/\n</code></pre>"},{"location":"home/page2/#forge-cli","title":"Forge CLI","text":"<p>The Forge Command Line Interface (CLI) is a powerful, versatile tool designed to streamline the development, deployment, and management of applications. It enables developers to automate repetitive tasks, manage project configurations, and interact directly with the services and infrastructure without leaving the terminal. This CLI tool simplifies complex processes through straightforward commands, significantly reducing development time and effort.</p>"},{"location":"home/page2/#verify-installation","title":"Verify Installation","text":"<p>Having successfully installed Lambda Forge, you are now ready to explore the capabilities of the Forge CLI. Begin by entering the following command to access the comprehensive list of available options and commands:</p> <pre><code>forge --help\n</code></pre>"},{"location":"home/page2/#create-a-new-project","title":"Create a New Project","text":"<p>Start a new project named <code>lambda-forge-demo</code>, incorporating the <code>--no-docs</code> flag to bypass docs generation initially as this will be covered on a specific section.</p> <pre><code>forge project lambda-forge-demo --repo-owner \"$GITHUB-OWNER\" --repo-name \"$GITHUB-REPO\" --no-docs\n</code></pre> <p>Make sure to replace <code>$GITHUB-OWNER</code> and <code>$GITHUB-REPO</code> with the actual GitHub owner and the name of an empty repository.</p>"},{"location":"home/page2/#project-structure","title":"Project Structure","text":"<p>Upon creatig your project, some directories and files are automatically generated for you. This initial structure is designed to streamline the setup process and provide a solid foundation for further development.</p> <p>In the upcoming sections of this tutorial, we'll explore each of these components in detail. For now, familiarize yourself with the foundational structure that should resemble the following:</p> <pre><code>.\n\u251c\u2500\u2500 authorizers\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 functions\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 infra\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 services\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 api_gateway.py\n\u2502   \u2502   \u251c\u2500\u2500 aws_lambda.py\n\u2502   \u2502   \u2514\u2500\u2500 layers.py\n\u2502   \u251c\u2500\u2500 stacks\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 dev_stack.py\n\u2502   \u2502   \u251c\u2500\u2500 lambda_stack.py\n\u2502   \u2502   \u251c\u2500\u2500 prod_stack.py\n\u2502   \u2502   \u2514\u2500\u2500 staging_stack.py\n\u2502   \u2514\u2500\u2500 stages\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 deploy.py\n\u251c\u2500\u2500 layers\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 .coveragerc\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 cdk.json\n\u251c\u2500\u2500 pytest.ini\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>The <code>cdk.json</code> file, located at the root of your directory, serves as the central configuration hub for Lambda Forge projects. When you run the <code>forge project</code> command, Forge automatically applies the informed settings into the cdk.json file.</p> cdk.json<pre><code>    \"region\": \"us-east-2\",\n    \"account\": \"\",\n    \"name\": \"Lambda-Forge-Demo\",\n    \"repo\": {\n      \"owner\": \"$GITHUB-OWNER\",\n      \"name\": \"$GITHUB-REPO\"\n    },\n    \"bucket\": \"\",\n    \"coverage\": 80,\n</code></pre> <p>For a comprehensive list of configurations that Forge supports, you can refer to the command line help by running <code>forge project --help</code>.</p>"},{"location":"home/page3/","title":"Creating a Public Hello World Function With API Gateway","text":"<p>Creating a public \"Hello World\" function is a fantastic way to get started with Lambda Forge. This function will serve as a simple demonstration of Lambda Forge's ability to quickly deploy serverless functions accessible via an HTTP endpoint.</p> <p>Here's how you can create your first public Hello World function.</p> <pre><code>forge function hello_world --method \"GET\" --description \"A simple hello world\" --public\n</code></pre> <p>This command prompts Lambda Forge to initiate a new Lambda function located in the <code>hello_world</code> directory. The <code>--method</code> parameter defines the HTTP method accessible for this function.. The <code>--description</code> option provides a concise summary of the function\u2019s intent, and the <code>--public</code> flag ensures the function is openly accessible, allowing it to be invoked by anyone who has the URL.</p>"},{"location":"home/page3/#understanding-the-function-structure","title":"Understanding the Function Structure","text":"<p>When you create a new function with Lambda Forge, it not only simplifies the creation process but also sets up a robust and organized file structure for your function. This structure is designed to support best practices in software development, including separation of concerns, configuration management, and testing. Let's break down the structure of the automatically generated hello_world function:</p> <pre><code>functions/\n\u2514\u2500\u2500 hello_world/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 config.py\n    \u251c\u2500\u2500 integration.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 unit.py\n</code></pre> <ul> <li><code>functions/</code> This directory is the root folder for all your Lambda functions. Each function has its own subdirectory within this folder.</li> <li><code>hello_world/</code> The hello_world subdirectory contains all the necessary files for your function to run, be configured, and tested.</li> <li><code>__init__.py</code> This file marks the directory as a Python package, allowing its modules to be imported elsewhere.</li> <li><code>config.py</code> Holds the configuration settings for the function. These might include environment variables, resource identifiers, and other parameters critical for the function's operation.</li> <li><code>integration.py</code> Contains integration tests that simulate the interaction of your function with external services or resources.</li> <li><code>main.py</code> This is where the core logic of your Lambda function resides. The handler function, which AWS Lambda invokes when the function is executed, is defined here.</li> <li><code>unit.py</code> Contains unit tests for your function. Unit tests focus on testing individual parts of the function's code in isolation, ensuring that each component behaves as expected.</li> </ul>"},{"location":"home/page3/#implementing-the-hello-world-function","title":"Implementing the Hello World Function","text":"<p>The Lambda function's implementation should be in the <code>main.py</code> file. Below is an example showcasing our simple HelloWorld function:</p> functions/hello_world/main.py<pre><code>import json\nfrom dataclasses import dataclass\n\n@dataclass\nclass Input:\n    pass\n\n@dataclass\nclass Output:\n    message: str\n\ndef lambda_handler(event, context):\n\n    return {\n        \"statusCode\": 200,\n        \"body\": json.dumps({\"message\": \"Hello World!\"})\n    }\n</code></pre> <p>The <code>Input</code> and <code>Output</code> data classes are the entrypoint for the documentation creation process. However, since the project was launched with the <code>--no-docs</code> flag, we will temporarily skip the docs generation details.</p> <p>Moving forward, we've successfully implemented a straightforward lambda function that outputs a basic JSON response: <code>{\"message\": \"Hello World!\"}</code>.</p>"},{"location":"home/page3/#configuring-your-lambda-function-dependencies","title":"Configuring Your Lambda Function Dependencies","text":""},{"location":"home/page3/#the-services-class","title":"The Services Class","text":"<p>Within the <code>infra/services/__init__.py</code> file, you'll find the Services class, a comprehensive resource manager designed to streamline the interaction with AWS services. This class acts as a dependency injector, enabling the easy and efficient configuration of AWS resources directly from your <code>config.py</code> files.</p> infra/services/__init__.py<pre><code>from infra.services.api_gateway import APIGateway\nfrom infra.services.aws_lambda import AWSLambda\nfrom infra.services.layers import Layers\n\nclass Services:\n\n    def __init__(self, scope, context) -&gt; None:\n        self.api_gateway = APIGateway(scope, context)\n        self.aws_lambda = AWSLambda(scope, context)\n        self.layers = Layers(scope)\n</code></pre>"},{"location":"home/page3/#utilizing-the-services-class-in-configpy","title":"Utilizing the Services Class in config.py","text":"<p>In our Lambda Forge projects, the <code>config.py</code> file plays a crucial role in defining and configuring the dependencies required by a Lambda function.</p> <p>By passing an instance of Services to our configuration classes, we can seamlessly create and manage resources such as Lambda functions and API Gateway endpoints.</p> functions/hello_world/config.py<pre><code>from infra.services import Services\n\nclass HelloWorldConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"HelloWorld\",\n            path=\"./functions/hello_world\",\n            description=\"A simple hello world\"\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/hello_world\", function, public=True)\n</code></pre> <p>The Forge CLI has significantly simplified the setup by automatically tailoring the function to meet our specifications. Essentially, the <code>config.py</code> file configures a Lambda Function to be named as <code>HelloWorld</code> accompanied by the description <code>A simple hello world</code>.</p> <p>Additionally, it sets up the function to respond to GET requests at the <code>/hello_world</code> path and designates it as a public endpoint, making it accessible without authentication.</p>"},{"location":"home/page3/#deploying-your-lambda-function","title":"Deploying Your Lambda Function","text":"<p>To deploy your Lambda function, you should integrate the Config class within the <code>infra/stacks/lambda_stack.py</code> file.</p> <p>The Forge CLI streamlines this process by automatically incorporating it for you.</p> infra/stacks/lambda_stack.py<pre><code>from aws_cdk import Stack\nfrom constructs import Construct\nfrom infra.services import Services\nfrom lambda_forge import release\nfrom functions.hello_world.config import HelloWorldConfig\n\n\n@release\nclass LambdaStack(Stack):\n    def __init__(self, scope: Construct, context, **kwargs) -&gt; None:\n\n        super().__init__(scope, f\"{context.name}-Lambda-Stack\", **kwargs)\n\n        self.services = Services(self, context)\n\n        # HelloWorld\n        HelloWorldConfig(self.services)\n</code></pre>"},{"location":"home/page3/#push-your-code-to-github","title":"Push Your Code To Github","text":"<p>With all the required settings now in place, we're ready to upload our code to the GitHub repository.</p> <p>Lambda Forge is designed to support a multi-stage deployment process, automatically creating environments for Production, Staging and Development. These environments correspond to the <code>main</code>, <code>staging</code>, and <code>dev</code> branches, respectively.</p> <p>For the sake of simplicity, we'll focus on deploying only the development branch at this moment, deferring the discussion on setting up a multi-stage environment to a future session.</p> <pre><code># Initialize the Git repository\ngit init\ngit add .\n\n# Commit the changes\ngit commit -m \"Initial commit\"\n\n# Set the remote repository\ngit remote add origin git@github.com:$GITHUB_USER/$GITHUB_REPO.git\n\n# Create, checkout, and push the 'dev' branch\ngit checkout -b dev\ngit push -u origin dev\n</code></pre>"},{"location":"home/page3/#deploying-the-stacks","title":"Deploying the Stacks","text":"<p>Lambda Forge ensures that every resource it creates on AWS follows a naming convention that integrates the deployment stage, the project name, and the resource name. This approach guarantees a consistent and clear identification methodology throughout the project.</p> <p>The project name is defined within the <code>cdk.json</code> file, linking each resource directly to its associated project and stage for easy management and recognition.</p> cdk.json<pre><code>    \"region\": \"us-east-2\",\n    \"account\": \"\",\n    \"name\": \"Lambda-Forge-Demo\",\n    \"repo\": {\n      \"owner\": \"$GITHUB-OWNER\",\n      \"name\": \"$GITHUB-REPO\"\n    },\n</code></pre> <p>Deploy the Dev Stack by running the following command in your terminal:</p> <pre><code>cdk deploy Dev-Lambda-Forge-Demo-Stack\n</code></pre> <p>Following a successful deployment, a new pipeline will be created with the name <code>Dev-Lambda-Forge-Demo-Pipeline</code>. Access your AWS CodePipeline console to view it.</p> <p></p> <p>In a dedicated session, we'll delve into the specifics of the pipelines generated, including a closer examination of the development pipeline.</p> <p>By default, Lambda Forge does not incorporate any steps for code validation in the dev pipeline. Instead, it seamlessly integrates Github with AWS CodePipeline. This means that once code is pushed to GitHub, it triggers the pipeline, leading to automatic deployment upon the completion of the execution process.</p> <p>After the pipeline execution concludes, proceed to your AWS Lambda console and locate the <code>Dev-Lambda-Forge-Demo-HelloWorld</code> function.</p> <p></p> <p>Select the function, then navigate to <code>Configurations -&gt; Triggers</code>. Here, you will be presented with a link to your newly deployed Lambda function, ready for use.</p> <p></p> <p>For this tutorial, the Lambda function is accessible via the following URL:</p> <ul> <li>https://gxjca0e395.execute-api.us-east-2.amazonaws.com/dev/hello_world</li> </ul> <p>Congratulations! \ud83c\udf89 You've successfully deployed your very first Hello World function using Lambda Forge! \ud83d\ude80</p>"},{"location":"home/page4/","title":"Securing Endpoints Through an Authorizer","text":"<p>In this section, we will delve into securing endpoints by introducing an intermediary function known as an authorizer which will be responsible for validating incoming requests, determining if they should be allowed to access the targeted resources.</p> <p>By implementing an authorizer, you can ensure that only authenticated and authorized requests are processed by your endpoints, enhancing the security and privacy of your application.</p> <p>In fact, Lambda Forge treats all lambda functions as private by default. That's why we had to use the <code>--public</code> flag when creating the previous hello world function, to make it accessible without authentication. Without this flag, we would have been required to implement an authorizer for user authentication.</p>"},{"location":"home/page4/#creating-an-authorizer","title":"Creating an Authorizer","text":"<p>First, let's begin by creating a new authorizer function with the following command:</p> <pre><code>forge authorizer secret --description \"An authorizer to validate requests based on a secret present on the headers\"\n</code></pre> <p>This command instructs the forge CLI tool to create a new authorizer under the <code>secret</code> directory.</p>"},{"location":"home/page4/#authorizer-structure","title":"Authorizer Structure","text":"<p>Authorizers, while closely resembling Lambda Functions in structure, they fulfill a distinct role.</p> <p>Let's examine the structure of an authorizer more closely:</p> <pre><code>authorizers\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 secret\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 config.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 unit.py\n\u2514\u2500\u2500 utils\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <ul> <li><code>authorizers/</code> This directory serves as the central hub for all authorizer functions, analogous to how the <code>functions/</code> directory houses Lambda functions. Each distinct authorizer is allocated its own subdirectory within this folder.</li> <li><code>secret/</code> This subdirectory is specifically designed for developing the <code>secret</code> authorizer.</li> <li><code>__init__.py</code> Marks the directory as a Python package, enabling its modules to be imported elsewhere within the project.</li> <li><code>config.py</code> Contains the configuration settings for the authorizer, such as environmental variables and access control parameters.</li> <li><code>main.py</code> Houses the main logic for the authorizer, detailing how incoming requests are verified.</li> <li><code>unit.py</code> Focused on unit testing for the authorizer, these tests ensure that each part of the authorizer's code operates as expected independently.</li> <li><code>utils/</code> Provides utility functions that are used by the authorizers, offering common functionalities or resources that can be leveraged across various authorizers.</li> </ul>"},{"location":"home/page4/#implementing-the-authorizer","title":"Implementing The Authorizer","text":"<p>Forge automatically generates a basic implementation of an AWS Lambda authorizer. This example is intended solely for demonstration and learning purposes, and it is critical to devise a comprehensive and secure authentication mechanism suitable for your application's specific security needs. For demonstration, the authorizer checks a custom header for a specific secret value to decide on granting or denying access.</p> <p>Important Note: The example below employs a simple secret key for authorization and should not be used in production environments. It is crucial to replace this logic with a robust, secure authorization strategy before deploying your application.</p> authorizers/secret/main.py<pre><code>def lambda_handler(event, context):\n\n    # ATTENTION: The example provided below is strictly for demonstration purposes and should NOT be deployed in a production environment.\n    # It's crucial to develop and integrate your own robust authorization mechanism tailored to your application's security requirements.\n    # To utilize the example authorizer as a temporary placeholder, ensure to include the following header in your requests:\n\n    # Header:\n    # secret: CRMdDRMA4iW4xo9l38pACls7zsHYfp8T7TLXtucysb2lB5XBVFn8\n\n    # Remember, security is paramount. This placeholder serves as a guide to help you understand the kind of information your custom authorizer should authenticate.\n    # Please replace it with your secure, proprietary logic before going live. Happy coding!\n\n    secret = event[\"headers\"].get(\"secret\")\n\n    SECRET = \"CRMdDRMA4iW4xo9l38pACls7zsHYfp8T7TLXtucysb2lB5XBVFn8\"\n    effect = \"allow\" if secret == SECRET else \"deny\"\n\n    policy = {\n        \"policyDocument\": {\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [\n                {\n                    \"Action\": \"execute-api:Invoke\",\n                    \"Effect\": effect,\n                    \"Resource\": \"*\"\n                }\n            ],\n        },\n    }\n    return policy\n</code></pre> <p>The code snippet above demonstrates that the authorizer is configured to verify the presence of a specific header in the request, as shown below:</p> <p><code>secret: CRMdDRMA4iW4xo9l38pACls7zsHYfp8T7TLXtucysb2lB5XBVFn8</code></p> <p>This key serves as a simple form of authentication, granting or denying access based on its presence and accuracy in the request headers.</p> <p>The secret mentioned is automatically generated by Forge, meaning the specific secret you encounter during your implementation will differ from the example provided. Please be mindful of this distinction as you proceed.</p>"},{"location":"home/page4/#configuring-the-authorizer","title":"Configuring The Authorizer","text":"<p>Similar to lambda functions in terms of setup, authorizers diverge in their application. Instead of establishing an endpoint on API Gateway, an authorizer is configured to control access to one or more endpoints.</p> authorizers/secret/config.py<pre><code>from infra.services import Services\n\nclass SecretAuthorizerConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"SecretAuthorizer\",\n            path=\"./authorizers/secret\",\n            description=\"An authorizer to validate requests based on a secret present on the headers\"\n        )\n\n        services.api_gateway.create_authorizer(function, name=\"secret\")\n</code></pre> <p>The configuration detailed above establishes a new authorizer, assigning it a unique identifier <code>secret</code> within the API Gateway.</p>"},{"location":"home/page4/#adding-authorizer-to-lambda-stack","title":"Adding Authorizer To Lambda Stack","text":"<p>Similarly to the functions, an authorizer needs to be initialized within the <code>LambdaStack</code> class.</p> <p>Fortunately, Forge takes care of this automatically.</p> infra/stacks/lambda_stack.py<pre><code>from aws_cdk import Stack\nfrom constructs import Construct\nfrom infra.services import Services\nfrom lambda_forge import release\nfrom authorizers.secret.config import SecretAuthorizerConfig\nfrom functions.hello_world.config import HelloWorldConfig\n\n\n@release\nclass LambdaStack(Stack):\n    def __init__(self, scope: Construct, context, **kwargs) -&gt; None:\n\n        super().__init__(scope, f\"{context.name}-Lambda-Stack\", **kwargs)\n\n        self.services = Services(self, context)\n\n        # Authorizers\n        SecretAuthorizerConfig(self.services)\n\n        # HelloWorld\n        HelloWorldConfig(self.services)\n</code></pre>"},{"location":"home/page4/#creating-a-private-function","title":"Creating a Private Function","text":"<p>Now let's create a new private function.</p> <pre><code>forge function private --method \"GET\" --description \"A private function\"\n</code></pre> <p>Upon creating a new function using the Forge CLI, the project's function structure is expanded to include this new function alongside the existing ones.</p> <pre><code>functions\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 hello_world\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 config.py\n\u2502   \u251c\u2500\u2500 integration.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 unit.py\n\u2514\u2500\u2500 private\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 config.py\n    \u251c\u2500\u2500 integration.py\n    \u251c\u2500\u2500 main.py\n    \u2514\u2500\u2500 unit.py\n</code></pre>"},{"location":"home/page4/#implementing-the-function","title":"Implementing the Function","text":"<p>Let's make some adjustments to the response returned by this Lambda function:</p> functions/private/main.py<pre><code>def lambda_handler(event, context):\n\n    return {\n        \"statusCode\": 200,\n        \"body\": json.dumps({\"message\": \"Hello From Private!\"})\n    }\n</code></pre> <p>Rather than displaying the message <code>Hello World!</code>, we will now return <code>Hello From Private!</code>.</p> <p>Additionally, let's revise the unit tests to accurately represent the modifications we've implemented in our code.</p> functions/private/unit.py<pre><code>import json\nfrom .main import lambda_handler\n\ndef test_lambda_handler():\n\n    response = lambda_handler(None, None)\n\n    assert response[\"body\"] == json.dumps({\"message\": \"Hello From Private!\"})\n</code></pre>"},{"location":"home/page4/#configuring-the-function-as-private","title":"Configuring the Function as Private","text":"<p>To configure the function as private, we must link it to the authorizer by passing the authorizer's name, established during its creation, to the <code>create_endpoint</code> method.</p> functions/private/config.py<pre><code>from infra.services import Services\n\nclass PrivateConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"Private\",\n            path=\"./functions/private\",\n            description=\"A private function\",\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/private\", function, authorizer=\"secret\")\n</code></pre> <p>This configuration file establishes a new private function that is secured with the <code>secrets</code> authorizer and accessible via a GET request at the <code>/private</code> endpoint.</p>"},{"location":"home/page4/#deployment-process-for-both-authorizer-and-function","title":"Deployment Process for Both Authorizer and Function","text":"<p>As the next step, let's proceed to upload our updates to GitHub.</p> <pre><code># Add all changes to the staging area\ngit add .\n\n# Commit the staged changes with a clear message\ngit commit -m \"Implemented a private function with an authorizer\"\n\n# Push the committed changes to the 'dev' branch\ngit push origin dev\n</code></pre> <p>This operation will automatically initiate our development pipeline.</p> <p></p> <p>After the pipeline completes successfully, the private Lambda function becomes operational:</p> <ul> <li>Dev: https://gxjca0e395.execute-api.us-east-2.amazonaws.com/dev/private</li> </ul> <p>Direct access to these URLs through a web browser will display an unauthorized access message:</p> <pre><code>{\n  \"Message\": \"User is not authorized to access this resource with an explicit deny\"\n}\n</code></pre> <p>However, access is granted when including the necessary secret in the request header. Below is how to use <code>curl</code> to access the Lambda function:</p> <pre><code>curl --request GET \\\n  --url https://gxjca0e395.execute-api.us-east-2.amazonaws.com/dev/private \\\n  --header 'secret: CRMdDRMA4iW4xo9l38pACls7zsHYfp8T7TLXtucysb2lB5XBVFn8'\n</code></pre> <p>Upon running the curl command, you will receive the following response:</p> <pre><code>{\n  \"message\": \"Hello From Private!\"\n}\n</code></pre> <p>This validates the functionality of our authorizer, effectively securing the private Lambda function to ensure access is only available to those possessing the correct secret header.</p>"},{"location":"home/page4/#setting-a-default-authorizer","title":"Setting a Default Authorizer","text":"<p>Lambda Forge automatically considers all functions as private unless specified otherwise. This means functions are generally expected to require an authorizer for access control, unless they are explicitly marked as public.</p> <p>To facilitate easier management and to obviate the need for specifying an authorizer for each Lambda function individually, Lambda Forge allows for the designation of a default authorizer. This default authorizer is automatically applied to all non-public Lambda functions, streamlining the configuration process for securing access.</p> <p>To set an authorizer as the default, you can use the <code>default=True</code> argument in the <code>create_authorizer</code> method when defining your authorizer.</p> authorizers/secret/config.py<pre><code>        function = services.aws_lambda.create_function(\n            name=\"SecretAuthorizer\",\n            path=\"./authorizers/secret\",\n            description=\"An authorizer to validate requests based on a secret present on the headers\"\n        )\n\n        services.api_gateway.create_authorizer(function, name=\"secret\", default=True)\n</code></pre> <p>Next, we'll update the Private Function configuration to no longer directly associate it with the <code>secrets</code> authorizer.</p> functions/private/config.py<pre><code>        function = services.aws_lambda.create_function(\n            name=\"Private\",\n            path=\"./functions/private\",\n            description=\"A private function\",\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/private\", function)\n</code></pre> <p>Having designated the <code>secret</code>authorizer as the default, any function not explicitly linked to a particular authorizer and not flagged as public, such as this one, will inherently be protected by the <code>secret</code> authorizer by default.</p>"},{"location":"home/page5/","title":"Utilizing Lambda Layers for Code Reuse and External Library Integration","text":""},{"location":"home/page5/#what-are-lambda-layers","title":"What Are Lambda Layers?","text":"<p>Lambda Layers are essentially ZIP archives containing libraries, custom runtime environments, or other dependencies. You can include these layers in your Lambda function\u2019s execution environment without having to bundle them directly with your function's deployment package. This means you can use libraries or custom runtimes across multiple Lambda functions without needing to include them in each function\u2019s codebase.</p>"},{"location":"home/page5/#key-benefits","title":"Key Benefits","text":"<ul> <li>Code Reusability: Lambda Layers promote code reuse. By storing common components in layers, you can easily share them across multiple functions.</li> <li>Simplified Management: Managing your function\u2019s dependencies becomes easier. You can update a shared library in a layer without updating every function that uses it.</li> <li>Efficiency: Layers can reduce the size of your deployment package, making uploads faster and reducing the time it takes to update or deploy functions.</li> <li>Flexibility: You can create layers for different programming languages or purposes, offering flexibility in how you organize and manage dependencies.</li> </ul>"},{"location":"home/page5/#how-they-work","title":"How They Work","text":"<p>When you create a Lambda function, you specify which layers to include in its execution environment. During execution, AWS Lambda configures the function's environment to include the content of the specified layers. This content is available to your function's code just as if it were included in the deployment package directly.</p>"},{"location":"home/page5/#use-cases","title":"Use Cases","text":"<ul> <li>Sharing libraries: Commonly used libraries can be placed in a layer and shared among multiple functions.</li> <li>Custom runtimes: You can use layers to deploy functions in languages that AWS Lambda does not natively support by including the necessary runtime in a layer.</li> <li>Configuration files: Layers can be used to store configuration files that multiple functions need to access.</li> </ul>"},{"location":"home/page5/#aws-lambda-development-with-custom-layers","title":"AWS Lambda Development with Custom Layers","text":"<p>Forge streamlines the process of creating and sharing custom layers across AWS Lambda functions, significantly simplifying code reuse and management. This section walks you through creating a custom layer using Forge, integrating it into your development workflow, and utilizing it within a Lambda function.</p>"},{"location":"home/page5/#creating-a-custom-layer","title":"Creating a Custom Layer","text":"<p>To begin, execute the following command to create a custom layer named <code>my_custom_layer</code>:</p> <pre><code>forge layer --custom my_custom_layer\n</code></pre> <p>This command sets up a specific directory structure for your layer within your project, organizing the code efficiently:</p> <pre><code>layers\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 my_custom_layer\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 my_custom_layer.py\n</code></pre> <p>Forge not only initializes the necessary structure but also populates my_custom_layer.py with a starter function. This function acts as a blueprint for your shared code:</p> layers/my_custom_layer/my_custom_layer.py<pre><code>def hello_from_layer():\n    return \"Hello from my_custom_layer layer!\"\n</code></pre> <p>Additionally, Forge sets the new custom layer in the Layers class.</p> infra/services/layers.py<pre><code>from aws_cdk import aws_lambda as _lambda\nfrom lambda_forge import Path\n\n\nclass Layers:\n    def __init__(self, scope) -&gt; None:\n\n        self.my_custom_layer = _lambda.LayerVersion(\n            scope,\n            id='MyCustomLayer',\n            code=_lambda.Code.from_asset(Path.layer('layers/my_custom_layer')),\n            compatible_runtimes=[_lambda.Runtime.PYTHON_3_9],\n            description='',\n         )\n</code></pre> <p>Traditionally, working with Lambda layers introduces complexity during development. Since Lambda layers are deployed as zip files and run within the Lambda execution environment, developers usually face challenges in utilizing these layers locally. This often leads to a disconnect between development and production environments, complicating the development process.</p> <p>When you create a custom layer using Forge, the new layer is automatically integrated into your local virtual environment, similar to installing an external library from pip. However, to ensure that these changes are fully recognized, you may need to reload your IDE or reselect your virtual environment.</p> <p>Note</p> In case you need to reinstall all custom layers into your virtual environment, use the command:  <pre><code>forge layers --install\n</code></pre>"},{"location":"home/page5/#creating-a-lambda-function-utilizing-the-custom-layer","title":"Creating a Lambda Function Utilizing the Custom Layer","text":"<p>Create a new Lambda function that leverages your custom layer by running:</p> <pre><code>forge function custom --method \"GET\" --description \"A function that uses my_custom_layer\" --belongs-to \"layers\" --endpoint \"/layers/custom\" --public\n</code></pre> <p>The <code>--belongs-to</code> flag indicates to Forge that this function is part of a group of related functions, organizing them together in the same directory. It also specifies the API Gateway endpoint path with the <code>--endpoint</code> flag.</p> <pre><code>functions\n\u2514\u2500\u2500 layers\n    \u251c\u2500\u2500 custom\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Now, implement the function to utilize the custom layer:</p> functions/layers/custom/main.py<pre><code>import json\nfrom dataclasses import dataclass\n\nimport my_custom_layer\n\n\n@dataclass\nclass Input:\n    pass\n\n\n@dataclass\nclass Output:\n    message: str\n\n\ndef lambda_handler(event, context):\n\n    message = my_custom_layer.hello_from_layer()\n\n    return {\"statusCode\": 200, \"body\": json.dumps({\"message\": message})}\n</code></pre> <p>Also, update the unit tests to expect the correct output message:</p> functions/layers/custom/unit.py<pre><code>import json\nfrom .main import lambda_handler\n\ndef test_lambda_handler():\n\n    response = lambda_handler(None, None)\n\n    assert response[\"body\"] == json.dumps({\"message\": \"Hello from my_custom_layer layer!\"})\n</code></pre> <p>Finally, configure the function to make use of the <code>my_custom_layer</code> layer:</p> functions/layers/custom/config.py<pre><code>from infra.services import Services\n\n\nclass CustomConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"Custom\",\n            path=\"./functions/layers\",\n            description=\"A function to make use of the custom layer\",\n            directory=\"custom\",\n            layers=[services.layers.my_custom_layer],\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/layers/custom\", function, public=True)\n</code></pre> <p>Once you've committed and pushed your code to GitHub and the pipeline has successfully executed, making a GET request to the generated URL should return the following response:</p> <pre><code>{\n  \"message\": \"Hello from my_custom_layer layer!\"\n}\n</code></pre> <p>The URL for this tutorial is:</p> <ul> <li>https://gxjca0e395.execute-api.us-east-2.amazonaws.com/dev/layers/custom</li> </ul>"},{"location":"home/page5/#aws-lambda-development-with-external-libraries","title":"AWS Lambda Development with External Libraries","text":"<p>In software development, using external libraries is a common practice to extend functionality and streamline the development process. When working with AWS Lambda, incorporating these external libraries requires integrating them as layers into our Lambda functions.</p> <p>To illustrate this scenario, we will develop a new lambda function aimed to parsing the data retrieved from the external API https://randomuser.me/api/, a public service for generating random fake user data. Since the <code>requests</code> library is not inherently included in Python, it will be necessary to integrate it as a layer in our lambda function.</p>"},{"location":"home/page5/#incorporating-requests-from-public-layers","title":"Incorporating Requests from Public Layers","text":"<p>The <code>requests</code> library is widely used and recognized for its utility. Fortunately, AWS Lambda offers this library as public layers, simplifying the process of integrating them into your projects without the need to create custom layers.</p> <p>For projects utilizing Python 3.9, we can leverage the specific Amazon Resource Names (ARNs) for the requests library made available through Klayers. This provides an efficient way to add these libraries to your Lambda functions. You can explore the complete list of public layers for Python 3.9 in the us-east-2 region here.</p> <p>Here is the ARN you'll need:</p> <ul> <li>Requests: <code>arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p39-requests:19</code></li> </ul> <p>Let's proceed by manually incorporating it into our Layers class.</p> infra/services/layers.py<pre><code>        self.my_custom_layer = _lambda.LayerVersion(\n            scope,\n            id='MyCustomLayer',\n            code=_lambda.Code.from_asset(Path.layer('layers/my_custom_layer')),\n            compatible_runtimes=[_lambda.Runtime.PYTHON_3_9],\n            description='',\n         )\n\n        self.requests_layer = _lambda.LayerVersion.from_layer_version_arn(\n            scope,\n            id=\"RequestsLayer\",\n            layer_version_arn=\"arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p39-requests:19\",\n        )\n</code></pre> <p>Additionally, include it in the <code>requirements.txt</code> file.</p> requirements.txt<pre><code>requests==2.28.1\n</code></pre>"},{"location":"home/page5/#creating-a-lambda-function-utilizing-the-requests-library","title":"Creating a Lambda Function Utilizing the Requests Library","text":"<p>To create a Lambda function that leverages the Requests library, execute the following command:</p> <pre><code>forge function external --method \"GET\" --description \"A function that uses an external library\" --belongs-to \"layers\" --endpoint \"/layers/external\" --public\n</code></pre> <p>This action initiates the creation of a new function within the <code>layers</code> directory.</p> <pre><code>functions\n\u2514\u2500\u2500 layers\n    \u251c\u2500\u2500 custom\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u251c\u2500\u2500 external\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 config.py\n    \u2502   \u251c\u2500\u2500 integration.py\n    \u2502   \u251c\u2500\u2500 main.py\n    \u2502   \u2514\u2500\u2500 unit.py\n    \u2514\u2500\u2500 utils\n        \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Now, implement the function to utilize the custom layer:</p> <pre><code>import json\nfrom dataclasses import dataclass\n\nimport requests\n\n\n@dataclass\nclass Input:\n    pass\n\n\n@dataclass\nclass Name:\n    title: str\n    first: str\n    last: str\n\n\n@dataclass\nclass Street:\n    number: int\n    name: str\n\n\n@dataclass\nclass Coordinates:\n    latitude: str\n    longitude: str\n\n\n@dataclass\nclass Timezone:\n    offset: str\n    description: str\n\n\n@dataclass\nclass Location:\n    street: Street\n    city: str\n    state: str\n    country: str\n    postcode: int\n    coordinates: Coordinates\n    timezone: Timezone\n\n\n@dataclass\nclass Login:\n    uuid: str\n    username: str\n    password: str\n    salt: str\n    md5: str\n    sha1: str\n    sha256: str\n\n\n@dataclass\nclass Output:\n    gender: str\n    name: Name\n    location: Location\n    email: str\n    login: Login\n    phone: str\n\n\ndef lambda_handler(event, context):\n\n    result = requests.get(\"https://randomuser.me/api\").json()[\"results\"][0]\n\n    data = {\n        \"gender\": result[\"gender\"],\n        \"name\": result[\"name\"],\n        \"location\": result[\"location\"],\n        \"email\": result[\"email\"],\n        \"login\": result[\"login\"],\n        \"phone\": result[\"phone\"],\n    }\n\n    return {\"statusCode\": 200, \"body\": json.dumps({\"data\": data})}\n</code></pre> <p>Additionally, update the unit tests to expect the correct output message:</p> functions/layers/external/unit.py<pre><code>import json\nfrom .main import lambda_handler\n\n\ndef test_lambda_handler():\n\n    response = lambda_handler(None, None)\n    body = json.loads(response[\"body\"])\n\n    assert [\"gender\", \"name\", \"location\", \"email\", \"login\", \"phone\"] == list(body.keys())\n</code></pre> <p>Finally, configure the function to make use of the requests layer:</p> functions/layers/custom/config.py<pre><code>from infra.services import Services\n\n\nclass ExternalConfig:\n    def __init__(self, services: Services) -&gt; None:\n\n        function = services.aws_lambda.create_function(\n            name=\"External\",\n            path=\"./functions/layers\",\n            description=\"A function that uses an external library\",\n            directory=\"external\",\n            layers=[services.layers.requests_layer],\n        )\n\n        services.api_gateway.create_endpoint(\"GET\", \"/layers/external\", function, public=True)\n</code></pre> <p>Once you've committed and pushed your code to GitHub and the pipeline has successfully executed, making a GET request to the generated URL should return the following response:</p> <pre><code>{\n  \"gender\": \"str\",\n  \"name\": {\n    \"title\": \"str\",\n    \"first\": \"str\",\n    \"last\": \"str\"\n  },\n  \"location\": {\n    \"street\": {\n      \"number\": \"int\",\n      \"name\": \"str\"\n    },\n    \"city\": \"str\",\n    \"state\": \"str\",\n    \"country\": \"str\",\n    \"postcode\": \"int\",\n    \"coordinates\": {\n      \"latitude\": \"str\",\n      \"longitude\": \"str\"\n    },\n    \"timezone\": {\n      \"offset\": \"str\",\n      \"description\": \"str\"\n    }\n  },\n  \"email\": \"str\",\n  \"login\": {\n    \"uuid\": \"str\",\n    \"username\": \"str\",\n    \"password\": \"str\",\n    \"salt\": \"str\",\n    \"md5\": \"str\",\n    \"sha1\": \"str\",\n    \"sha256\": \"str\"\n  },\n  \"phone\": \"str\"\n}\n</code></pre> <p>For this tutorial, the generated URL is:</p> <ul> <li>https://gxjca0e395.execute-api.us-east-2.amazonaws.com/dev/layers/external</li> </ul>"},{"location":"home/page6/","title":"Multi-Stage Environments With AWS CodePipeline","text":"<p>In practical scenarios, it is highly recommended to adopt a multi-stage development approach. This strategy allows you to freely develop and test your code in isolated environments without affecting your live production environment and, consequently, the real-world users of your application.</p> <p>In Lambda Forge, the pipelines for development, staging, and production are meticulously organized within distinct files, found at <code>infra/stacks/dev_stack.py</code>, <code>infra/stacks/staging_stack.py</code>, and <code>infra/stacks/prod_stack.py</code>, respectively.</p> <p>Each stage is designed to operate with its own set of isolated resources, to ensure that changes in one environment do not inadvertently affect another.</p> <p>Note</p> <p>Lambda Forge provides a suggested pipeline configuration for each stage of deployment. You're encouraged to customize these pipelines to fit your project's needs. Whether adding new steps, adjusting existing ones, reordering or even removing some of them. </p>"},{"location":"home/page6/#development-environment","title":"Development Environment","text":"<p>The <code>Development</code> environment is where the initial coding and feature implementation occur, allowing developers to make frequent changes and test new ideas in an isolated environment.</p> <p>This environment is strategically structured to facilitate rapid deployments, allowing new features to be rolled out directly without undergoing any preliminary validation steps. It functions essentially as a sandbox environment, providing developers with a space to both develop and test new features in a fast-paced and flexible setting. This approach enables immediate feedback and iterative improvements, streamlining the development process.</p>"},{"location":"home/page6/#configuring-the-development-environment","title":"Configuring the Development Environment","text":"<p>This section details the setup process for the development environment.</p> infra/stacks/dev_stack.py<pre><code>import aws_cdk as cdk\nfrom aws_cdk import pipelines as pipelines\nfrom aws_cdk.pipelines import CodePipelineSource\nfrom constructs import Construct\nfrom lambda_forge import context\n\nfrom infra.stages.deploy import DeployStage\n\n\n@context(stage=\"Dev\", resources=\"dev\")\nclass DevStack(cdk.Stack):\n    def __init__(self, scope: Construct, context, **kwargs) -&gt; None:\n        super().__init__(scope, f\"{context.stage}-{context.name}-Stack\", **kwargs)\n\n        source = CodePipelineSource.git_hub(\n            f\"{context.repo['owner']}/{context.repo['name']}\", \"dev\"\n        )\n\n        pipeline = pipelines.CodePipeline(\n            self,\n            \"Pipeline\",\n            synth=pipelines.ShellStep(\n                \"Synth\",\n                input=source,\n                install_commands=[\n                    \"pip install lambda-forge aws-cdk-lib\",\n                    \"npm install -g aws-cdk\",\n                ],\n                commands=[\n                    \"cdk synth\",\n                ],\n            ),\n            pipeline_name=f\"{context.stage}-{context.name}-Pipeline\",\n        )\n\n        pipeline.add_stage(DeployStage(self, context))\n</code></pre> <p>On line 10, the <code>context</code> decorator assigns the stage name as <code>Dev</code> and configures the use of resources tagged as <code>dev</code> in the <code>cdk.json</code> file. Moreover, it imports some additional configuration variables from the <code>cdk.json</code> file, assigning them to the argument named <code>context</code>.</p> cdk.json<pre><code>    \"region\": \"us-east-2\",\n    \"account\": \"\",\n    \"name\": \"Lambda-Forge-Demo\",\n    \"repo\": {\n      \"owner\": \"$GITHUB-OWNER\",\n      \"name\": \"$GITHUB-REPO\"\n    },\n    \"bucket\": \"\",\n    \"coverage\": 80,\n    \"dev\": {\n        \"arns\": {}\n    },\n    \"staging\": {\n        \"arns\": {}\n    },\n    \"prod\": {\n        \"arns\": {}\n    }\n</code></pre> <p>Additionally, we incorporate the source code from the <code>dev</code> branch hosted on GitHub into the pipeline. Subsequently, we finalize the deployment of the Lambda functions by activating the <code>DeployStage</code>.</p>"},{"location":"home/page6/#development-pipeline-workflow","title":"Development Pipeline Workflow","text":"<p>As the deployment of the Development Environment has been covered in previous sections, we'll not revisit those steps here. However, the diagram below succinctly illustrates the pipeline configuration established within the AWS CodePipeline.</p> graph TD;     Source --&gt; Build;     Build --&gt; UpdatePipeline[Update Pipeline]     UpdatePipeline --&gt; Assets     Assets --&gt; Deployment"},{"location":"home/page6/#staging-environment","title":"Staging Environment","text":"<p>The <code>Staging</code> environment serves as a near-replica of the production environment, enabling thorough testing and quality assurance processes to catch any bugs or issues before they reach the end-users.</p>"},{"location":"home/page6/#configuring-the-staging-environment","title":"Configuring the Staging Environment","text":"<p>Let's take a deeper look in the staging configuration file.</p> infra/stacks/staging_stack.py<pre><code>import aws_cdk as cdk\nfrom aws_cdk import pipelines as pipelines\nfrom aws_cdk.pipelines import CodePipelineSource\nfrom constructs import Construct\nfrom lambda_forge import Steps, context\n\nfrom infra.stages.deploy import DeployStage\n\n\n@context(stage=\"Staging\", resources=\"staging\")\nclass StagingStack(cdk.Stack):\n    def __init__(self, scope: Construct, context, **kwargs) -&gt; None:\n        super().__init__(scope, f\"{context.stage}-{context.name}-Stack\", **kwargs)\n\n        source = CodePipelineSource.git_hub(\n            f\"{context.repo['owner']}/{context.repo['name']}\", \"staging\"\n        )\n\n        pipeline = pipelines.CodePipeline(\n            self,\n            \"Pipeline\",\n            synth=pipelines.ShellStep(\n                \"Synth\",\n                input=source,\n                install_commands=[\n                    \"pip install lambda-forge aws-cdk-lib\",\n                    \"npm install -g aws-cdk\",\n                ],\n                commands=[\n                    \"cdk synth\",\n                ],\n            ),\n            pipeline_name=f\"{context.stage}-{context.name}-Pipeline\",\n        )\n\n        steps = Steps(self, context, source)\n\n        # pre\n        unit_tests = steps.run_unit_tests()\n        coverage = steps.run_coverage()\n        validate_docs = steps.validate_docs()\n        validate_integration_tests = steps.validate_integration_tests()\n\n        # post\n        generate_docs = steps.generate_docs()\n        integration_tests = steps.run_integration_tests()\n\n        pipeline.add_stage(\n            DeployStage(self, context),\n            pre=[\n                unit_tests,\n                coverage,\n                validate_integration_tests,\n            ],\n            post=[integration_tests],\n        )\n</code></pre> <p>Similar to the <code>Dev</code> environment, this environment is named <code>Staging</code>, with resources designated as <code>staging</code> in the <code>cdk.json</code> file. We also integrate the source code from the <code>staging</code> branch on GitHub into the pipeline. However, in contrast to Dev, the Staging environment incorporates stringent quality assurance protocols prior to deployment.</p> <p>Before deploying the functions, we execute all unit tests specified in the <code>unit.py</code> files. Additionally, we ensure that the code coverage percentage exceeds the threshold set in the <code>cdk.json</code> file. We also verify that every function connected to the API Gateway is subjected to at least one integration test, identified by the custom <code>pytest.mark.integration</code> decorator.</p> <p>Once all functions have been successfully deployed, we proceed to conduct integration tests as detailed in the <code>integration.py</code> files. Essentially, this procedure entails dispatching an HTTP request to each of the newly deployed functions and ensuring they respond with a 200 status code.</p> <p>Initially, the project was initiated with the <code>--no-docs</code> flag, resulting in the <code>validate_docs</code> and <code>generate_docs</code> steps being created but not integrated into the pipeline. We will delve into these steps in greater depth, exploring their functionality and potential benefits in the next section.</p>"},{"location":"home/page6/#deploying-the-staging-environment","title":"Deploying the Staging Environment","text":"<p>First let's create and push the current code to a new branch called <code>staging</code>.</p> <pre><code># Stage your changes\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"Deploying the Staging Environment\"\n\n# Create/switch to 'staging' branch.\ngit checkout -b staging\n\n# Push 'staging' to remote.\ngit push origin staging\n</code></pre> <p>Next, let's deploy the staging environment with CDK, adhering to the naming conventions established by Forge:</p> <pre><code>cdk deploy Staging-Lambda-Forge-Demo-Stack\n</code></pre> <p>This command initiates the deployment process. Shortly, AWS CodePipeline will integrate a new pipeline, specifically tailored for the staging environment.</p> <p></p> <p>The pipeline's configuration within AWS CodePipeline is depicted below, showcasing the streamlined workflow from source code to deployment:</p> graph TD;     Source --&gt; Build;     Build --&gt; UpdatePipeline[Update Pipeline]     UpdatePipeline --&gt; Assets     Assets --&gt; UnitTests[Unit Tests]     Assets --&gt; Coverage     Assets --&gt; ValidateIntegrationTests[Validate Integration Tests]     UnitTests --&gt; Deploy     Coverage --&gt; Deploy     ValidateIntegrationTests --&gt; Deploy     Deploy --&gt; IntegrationTests[Integration Tests] <p>The first deployment of the Staging Pipeline often results in failure, a situation that might seem alarming but is actually expected due to the sequence in which components are deployed and tested.</p> <p>This phenomenon occurs because the integration tests are set to execute immediately after the deployment phase. However, during the first deployment, the BASE URL hasn't been established since it's the inaugural setup of the Staging environment. Consequently, this leads to the failure of the <code>Integration_Test</code> phase.</p> <p></p> <p>Note that the failure arises after the deployment phase, indicating that the Lambda functions have been successfully deployed.</p> <p>To address this issue, we need to set up the base URL specifically for the integration tests. Follow the guidelines provided in the Retrieving the Api Gateway Base URL article to find your base URL.</p> <p>Having the BASE URL, it must then be incorporated into your <code>cdk.json</code> configuration file under the <code>base_url</code> key. This adjustment ensures that all integration tests can interact with the staging environment seamlessly for automated testing.</p> cdk.json<pre><code>    \"bucket\": \"\",\n    \"coverage\": 80,\n    \"base_url\": \"https://8kwcovaj0f.execute-api.us-east-2.amazonaws.com/staging\"\n</code></pre> <p>Once the base URL is properly configured for the integration tests, commit your changes and push the updated code to GitHub once again. Following these adjustments, the pipeline should successfully complete its run.</p>"},{"location":"home/page6/#production-environment","title":"Production Environment","text":"<p>The <code>Production</code> environment represents the phase where the tested and stable version of the software is deployed. This version is accessible to end-users and operates within the live environment. It is imperative that this stage remains the most safeguarded, permitting only fully vetted and secure code to be deployed. This precaution helps in minimizing the risk of exposing end-users to bugs or undesirable functionalities, ensuring a seamless and reliable user experience.</p>"},{"location":"home/page6/#configuring-the-production-environment","title":"Configuring the Production Environment","text":"<pre><code>import aws_cdk as cdk\nfrom aws_cdk import pipelines\nfrom aws_cdk.pipelines import CodePipelineSource\nfrom constructs import Construct\nfrom lambda_forge import Steps, context, create_context\n\nfrom infra.stages.deploy import DeployStage\n\n\n@context(\n    stage=\"Prod\",\n    resources=\"prod\",\n    staging=create_context(stage=\"Staging\", resources=\"staging\"),\n)\nclass ProdStack(cdk.Stack):\n    def __init__(self, scope: Construct, context, **kwargs) -&gt; None:\n        super().__init__(scope, f\"{context.stage}-{context.name}-Stack\", **kwargs)\n\n        source = CodePipelineSource.git_hub(\n            f\"{context.repo['owner']}/{context.repo['name']}\", \"main\"\n        )\n\n        pipeline = pipelines.CodePipeline(\n            self,\n            \"Pipeline\",\n            synth=pipelines.ShellStep(\n                \"Synth\",\n                input=source,\n                install_commands=[\n                    \"pip install lambda-forge aws-cdk-lib\",\n                    \"npm install -g aws-cdk\",\n                ],\n                commands=[\n                    \"cdk synth\",\n                ],\n            ),\n            pipeline_name=f\"{context.stage}-{context.name}-Pipeline\",\n        )\n\n        steps = Steps(self, context.staging, source)\n\n        # pre\n        unit_tests = steps.run_unit_tests()\n        coverage = steps.run_coverage()\n        validate_docs = steps.validate_docs()\n        validate_integration_tests = steps.validate_integration_tests()\n\n        # post\n        integration_tests = steps.run_integration_tests()\n\n        pipeline.add_stage(\n            DeployStage(self, context.staging),\n            pre=[\n                unit_tests,\n                coverage,\n                validate_integration_tests,\n            ],\n            post=[integration_tests],\n        )\n\n        # post\n        generate_docs = steps.generate_docs()\n\n        pipeline.add_stage(\n            DeployStage(self, context),\n            post=[],\n        )\n</code></pre> <p>This environment is named <code>Prod</code> and the resources used are provenient from the <code>prod</code> key in the <code>cdk.json</code> file. Additionally, the <code>main</code> branch on GitHub is being used to trigger the pipeline.</p> <p>Given the critical need for security and integrity in production, we replicate the staging environment, applying all tests and safeguards again before deploying the production stage. This ensures that any changes meet our high quality standards before production deployment, effectively protecting against vulnerabilities and ensuring a stable user experience.</p>"},{"location":"home/page6/#deploying-the-production-environment","title":"Deploying the Production Environment","text":"<p>Firstly, commit and push your code to a new branch named <code>main</code> on GitHub</p> <pre><code># Stage your changes\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"Deploying the Production Environment\"\n\n# Create/switch to 'main' branch.\ngit checkout -b main\n\n# Push 'main' to remote.\ngit push origin main\n</code></pre> <p>Following the branch setup, deploy your staging environment using the AWS CDK, adhering to the naming conventions provided by Forge.</p> <pre><code>cdk deploy Prod-Lambda-Forge-Demo-Stack\n</code></pre> <p>Executing this command initiates the creation of a new pipeline in AWS CodePipeline, designed to automate your deployment process.</p> <p></p> <p>The following diagram visually represents the configuration established in AWS CodePipeline.</p> graph TD;     Source --&gt; Build;     Build --&gt; UpdatePipeline[Update Pipeline]     UpdatePipeline --&gt; Assets     Assets --&gt; UnitTests[Unit Tests]     Assets --&gt; Coverage     Assets --&gt; ValidateIntegrationTests[Validate Integration Tests]     UnitTests --&gt; DeployStaging[Deploy Staging]     Coverage --&gt; DeployStaging     ValidateIntegrationTests --&gt; DeployStaging     DeployStaging --&gt; IntegrationTests[Integration Tests]     IntegrationTests --&gt; DeployProduction[Deploy Production] <p>Upon the successful completion of the pipeline execution, you'll be able to observe a new Lambda function ready and deployed within your AWS Lambda console </p> <p>To verify the url created, navigate to the newly deployed Lambda function in the AWS Lambda console. Within the function, proceed to <code>Configurations -&gt; Triggers</code>. Here, you'll find the URL for the new endpoint that has been activated as part of the deployment process.</p> <p>For this tutorial, the endpoint URL provided is:</p> <ul> <li>https://s6zqhu2pg1.execute-api.us-east-2.amazonaws.com/prod/hello_world</li> </ul>"},{"location":"home/page6/#overview","title":"Overview","text":"<p>By adhering to the instructions outlined in this tutorial, you are now equipped with three distinct CI/CD pipelines. Each pipeline corresponds to a specific stage of the development lifecycle, directly linked to the <code>dev</code>, <code>staging</code>, and <code>main</code> branches in your GitHub repository.</p> <p>These pipelines ensure that changes made in each branch are automatically integrated and deployed to the appropriate environment, streamlining the process from development through to production.</p> <p></p> <p>Furthermore, you have deployed three unique functions, each corresponding to a different environment:</p> <ul> <li>Dev: https://gxjca0e395.execute-api.us-east-2.amazonaws.com/dev/hello_world</li> <li>Staging: https://8kwcovaj0f.execute-api.us-east-2.amazonaws.com/staging/hello_world</li> <li>Prod: https://s6zqhu2pg1.execute-api.us-east-2.amazonaws.com/prod/hello_world</li> </ul> <p>Each link directs you to the corresponding function deployed within its respective environment, demonstrating the successful separation and management of development, staging, and production stages through your CI/CD workflows.</p> <p>Congratulations! \ud83c\udf89 You've successfully deployed your Lambda function across three different environments using Lambda Forge! \ud83d\ude80</p>"},{"location":"home/page7/","title":"Tailoring AWS CodePipeline with Custom Steps","text":"<p>Coming soon...</p>"},{"location":"home/page8/","title":"Generating Docs With Swagger and ReDoc","text":""},{"location":"home/page8/#documenting-a-lambda-function","title":"Documenting a Lambda Function","text":"<p>Inside each <code>main.py</code> file, you should include the <code>Input</code> and <code>Output</code> dataclasses that are going to be the entrypoint for generating the docs. Case you have an endpoint that's expecting a path parameter, you can also include it in the <code>Path</code> dataclass.</p> <p>The code snippet below demonstrates all the types of data you can expect to work with, including simple data types, lists, custom objects, optional fields, and literal types, offering a clear understanding of the input and output contracts for the API.</p> <pre><code>from dataclasses import dataclass\nfrom typing import List, Optional, Literal\n\n# Define a dataclass for path parameters, useful for API endpoints requiring parameters within the URL path.\n@dataclass\nclass Path:\n    id: str\n\n# A custom object class that represents a complex type with multiple fields.\n@dataclass\nclass Object:\n    a_string: str\n    an_int: int\n\n# The input data class represents the expected structure of the request payload.\n@dataclass\nclass Input:\n    a_string: str  # A simple string input\n    an_int: int  # A simple integer input\n    a_boolean: bool  # A boolean value\n    a_list: List[str]  # A list of strings\n    an_object: Object  # An instance of the custom 'Object' class defined above\n    a_list_of_object: List[Object]  # A list containing instances of 'Object'\n    a_literal: Literal[\"a\", \"b\", \"c\"]  # A literal type, restricting values to 'a', 'b', or 'c'\n    an_optional: Optional[str]  # An optional string, which can be either a string or None\n\n# The output data class represents the endpoint's output.\n@dataclass\nclass Output:\n    pass # No fields are defined, implying the output is empty.\n</code></pre>"},{"location":"home/page8/#setting-up-a-s3-bucket-for-documentation","title":"Setting Up a S3 Bucket for Documentation","text":"<p>Create an Amazon S3 bucket to serve as the primary storage for your documentation files. Follow these steps to create your S3 bucket:</p> <ol> <li>Access the AWS Management Console: Open the Amazon S3 console at https://console.aws.amazon.com/s3/.</li> <li>Create a New Bucket: Click on the \"Create bucket\" button. It's important to note that each bucket's name must be globally unique across all of Amazon S3.</li> <li>Set Bucket Name: Choose a unique and descriptive name for your bucket. This name will be crucial for accessing your documentation files. Remember, once a bucket name is set, it cannot be changed.</li> <li>Choose a Region: Select an AWS Region for your bucket. Choose the same region defined in your <code>cdk.json</code>.</li> <li>Configure Options: You may leave the default settings or configure additional options like versioning, logging, or add tags according to your needs.</li> <li>Review and Create: Before creating the bucket, review your settings. Once everything is confirmed, click \"Create bucket\".</li> </ol> <p>Once the bucket is created, update your <code>cdk.json</code> file with the bucket's name as shown below:</p> cdk.json<pre><code>...\n\"region\": \"us-east-2\",\n\"account\": \"\",\n\"name\": \"Lambda-Forge-Demo\",\n\"repo\": {\n    \"owner\": \"$GITHUB-USER\",\n    \"name\": \"$GITHUB-REPO\"\n},\n\"bucket\": \"$S3-BUCKET-NAME\",\n\"coverage\": 80,\n...\n</code></pre>"},{"location":"home/page8/#setting-up-documentation-endpoints","title":"Setting Up Documentation Endpoints","text":"<p>To activate docs generation, navigate to the <code>deploy.py</code> file located at <code>infra/stages/deploy.py</code>. Configure your endpoints as illustrated in the following example.</p> infra/stages/deploy.py<pre><code>import aws_cdk as cdk\nfrom constructs import Construct\n\nfrom infra.stacks.lambda_stack import LambdaStack\n\n\nclass DeployStage(cdk.Stage):\n    def __init__(self, scope: Construct, context, **kwargs):\n        super().__init__(scope, context.stage, **kwargs)\n\n        lambda_stack = LambdaStack(self, context)\n\n        # Sets up a Swagger-based public endpoint at /docs\n        lambda_stack.services.api_gateway.create_docs(authorizer=None)\n\n        # Establishes a Swagger-based private endpoint at /docs/private with the 'secret' authorizer\n        lambda_stack.services.api_gateway.create_docs(authorizer=\"secret\", endpoint=\"/docs/private\")\n\n        # Configures a Redoc-based public endpoint at /docs/redoc\n        lambda_stack.services.api_gateway.create_docs(authorizer=None, endpoint=\"/docs/redoc\", redoc=True)\n\n        # Sets up a Redoc-based private endpoint at /docs/private/redoc with the 'secret' authorizer\n        lambda_stack.services.api_gateway.create_docs(authorizer=\"secret\", endpoint=\"/docs/private/redoc\", redoc=True)\n</code></pre> <p>This configuration enables both public and private documentation endpoints using Swagger and Redoc, making your API's documentation accessible and versatile.</p>"},{"location":"home/page8/#configuring-the-pipelines-to-generate-the-docs","title":"Configuring the Pipelines to Generate the Docs","text":"<p>Given the development stage is designed for fast deployment, and serves as a sandbox environment, Lambda Forge does not generate documentation for the dev environment by default. However, if you wish to include docs generation in your development workflow, replicating the following steps for the dev environment should effectively enable this functionality.</p> <p>Because the project was started with the <code>--no-docs</code> flag, it currently lacks the <code>validate_docs</code> and <code>generate_docs</code> steps in both the Staging and Production pipelines.</p> <p>In essence, the <code>validate_docs</code> step ensures that all files intended for documentation are correctly configured with the necessary data classes. This step checks for completeness and accuracy in the documentation's underlying structure. On the other hand, the <code>generate_docs</code> step takes on the role of creating the documentation artifact itself and deploying it to the S3 bucket configured on the <code>cdk.json</code> file.</p> <p>To incorporate docs generation into your project, you'll need to modify your stack configurations. Specifically, you should enable the <code>validate_docs</code> and <code>generate_docs</code> steps within your CI/CD pipeline configurations for both Staging and Production environments.</p>"},{"location":"home/page8/#configuring-the-staging-pipeline","title":"Configuring the Staging Pipeline","text":"<p>To turn on documentation generation for the staging environment, add <code>validate_docs</code> in the pipeline's pre-execution phase and <code>generate_docs</code> post-deployment.</p> infra/stacks/staging_stack.py<pre><code>    # pre\n    unit_tests = steps.run_unit_tests()\n    coverage = steps.run_coverage()\n    validate_docs = steps.validate_docs()\n    validate_integration_tests = steps.validate_integration_tests()\n\n    # post\n    generate_docs = steps.generate_docs()\n    integration_tests = steps.run_integration_tests()\n\n    pipeline.add_stage(\n        DeployStage(self, context),\n        pre=[\n            unit_tests,\n            coverage,\n            validate_integration_tests,\n            validate_docs, # Validate docs enabled\n        ],\n        post=[integration_tests, generate_docs], # Generate docs enabled\n    )\n</code></pre> <p>The pipeline configuration will change for the staging environment. The following diagram illustrates the adjusted setup.</p> graph TD;     Source --&gt; Build;     Build --&gt; UpdatePipeline[Update Pipeline]     UpdatePipeline --&gt; Assets     Assets --&gt; UnitTests[Unit Tests]     Assets --&gt; Coverage     Assets --&gt; ValidateDocs[Validate Docs]     Assets --&gt; ValidateIntegrationTests[Validate Integration Tests]     UnitTests --&gt; Deploy     Coverage --&gt; Deploy     ValidateDocs --&gt; Deploy     ValidateIntegrationTests --&gt; Deploy     Deploy --&gt; IntegrationTests[Integration Tests]     Deploy --&gt; GenerateDocs[Generate Docs]"},{"location":"home/page8/#configuring-the-production-pipeline","title":"Configuring the Production Pipeline","text":"<p>Similarly for the Production stack, ensure that <code>validate_docs</code> and <code>generate_docs</code> are enabled.</p> infra/stacks/prod_stack.py<pre><code>    # pre\n    unit_tests = steps.run_unit_tests()\n    coverage = steps.run_coverage()\n    validate_docs = steps.validate_docs()\n    validate_integration_tests = steps.validate_integration_tests()\n\n    # post\n    integration_tests = steps.run_integration_tests()\n\n    pipeline.add_stage(\n        DeployStage(self, context.staging),\n        pre=[\n            unit_tests,\n            coverage,\n            validate_integration_tests,\n            validate_docs, # Validate docs enabled\n        ],\n        post=[integration_tests],\n    )\n\n    # post\n    generate_docs = steps.generate_docs()\n\n    pipeline.add_stage(\n        DeployStage(self, context),\n        post=[generate_docs], # Generate docs enabled\n    )\n</code></pre> <p>The pipeline configuration will also change change for the staging environment. The following diagram illustrates the adjusted setup.</p> graph TD;     Source --&gt; Build;     Build --&gt; UpdatePipeline[Update Pipeline]     UpdatePipeline --&gt; Assets     Assets --&gt; UnitTests[Unit Tests]     Assets --&gt; Coverage     Assets --&gt; ValidateDocs[Validate Docs]     Assets --&gt; ValidateIntegrationTests[Validate Integration Tests]     UnitTests --&gt; DeployStaging[Deploy Staging]     Coverage --&gt; DeployStaging     ValidateDocs --&gt; DeployStaging     ValidateIntegrationTests --&gt; DeployStaging     DeployStaging --&gt; IntegrationTests[Integration Tests]     IntegrationTests --&gt; DeployProduction[Deploy Production]     DeployProduction --&gt; GenerateDocs[Generate Docs]"},{"location":"home/page8/#deploying-the-docs","title":"Deploying the Docs","text":"<p>At this point, we have all the necessary components to automatically generate our docs.</p> <p>To proceed, commit your changes and push them to GitHub using the following commands:</p> <pre><code># Send your changes to stage\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"Activating docs for Staging and Production environments\"\n\n# Push changes to the 'dev' branch\ngit push origin dev\n\n# Merge 'dev' into 'staging' and push\ngit checkout staging\ngit merge dev\ngit push origin staging\n\n# Finally, merge 'staging' into 'main' and push\ngit checkout main\ngit merge staging\ngit push origin main\n</code></pre> <p>After the pipeline completes successfully, the documentation for your API's endpoints will be available through the URLs set up in the <code>DeployStage</code> class. This documentation offers detailed insights into the endpoints, including their request formats, response structures, and available query parameters.</p> <p>For easy access, the documentation for public endpoints in each environment is provided at:</p> <ul> <li> <p>Staging Environment:</p> </li> <li> <p>https://8kwcovaj0f.execute-api.us-east-2.amazonaws.com/staging/docs</p> </li> <li> <p>https://8kwcovaj0f.execute-api.us-east-2.amazonaws.com/staging/docs/redoc</p> </li> <li> <p>Production Environment:</p> </li> <li>https://s6zqhu2pg1.execute-api.us-east-2.amazonaws.com/prod/docs</li> <li>https://s6zqhu2pg1.execute-api.us-east-2.amazonaws.com/prod/docs/redoc</li> </ul> <p>Accessing the private endpoints, <code>/docs/private</code> for Swagger and <code>/docs/private/redoc</code> for Redoc, necessitates the inclusion of the security token generated by the <code>secret</code> authorizer, as specified in the authorizers section.</p>"},{"location":"home/page9/","title":"Pre-Commit Hooks","text":"<p>Coming soon...</p>"},{"location":"license/page1/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Guilherme Alves Pimenta</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}